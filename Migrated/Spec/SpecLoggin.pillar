! Building a small Login Dialog

We will show you how with only three methods and some boilerplate code we can build a simple login dialog.

!! Subclass of ComposableModel

Make a subclass of ComposableModel with instance variables for the UI elements that we need

[[[
ComposableModel subclass: #LoginModel
  instanceVariableNames: 'usernameLabel usernameField passwordLabel passwordField'
  classVariableNames: ''
  category: '_UnpackagedPackage'
]]]

!! UI Layout

Specify the layout of the UI

[[[
LoginModel class>>#defaultSpec
  <spec: #default>

	^ SpecLayout composed
		newColumn: [ :col |
			col 
				newRow: [ :row | 
					row 
						add: #usernameLabel width: 80; 
						add: #usernameField ]
							height: self inputTextHeight;
				newRow: [ :row | 
					row 
						add: #passwordLabel width: 80; 
						add: #passwordField ]
				height: self inputTextHeight ];
			yourself
]]]

!! Build the UI elements

[[[
LoginModel>>#initializeWidgets
  usernameLabel := self newLabel.
  usernameLabel text: 'Username'.
  usernameField := self newTextInput.
  usernameField autoAccept: true; ghostText: 'john@acme.com'.
  passwordLabel := self newLabel.
  passwordLabel text: 'Password'; yourself.
  passwordField := self newTextInput.
  passwordField beEncrypted; autoAccept: true; ghostText: '******'.
  self focusOrder add: usernameField; add: passwordField
]]]


!! Open the UI as modal dialog

[[[
LoginModel class>>#getCredentials
  "self getCredentials"
	
  | login dialog |
  login := self new.
  dialog := login openDialogWithSpec.
  dialog modalRelativeTo: self currentWorld.
  dialog cancelled ifTrue: [ ^ nil ].
  ^ login credentials
]]]

!! Some boilerplate code

Auto-generate read accessors for the 4 instance variables.

[[[
LoginModel>>#title
  ^ 'Login'

LoginModel>>#initialExtent
  ^ 350 @ 150

LoginModel>>#credentials
  ^ usernameField text -> passwordField text
]]]

the extent and width should be calculated values.

That would change the example code to something like

LoginModel class>>defaultSpec
<spec: #default>
^SpecLayout composed
      newColumn: [ :col | 
        col 
          newRow: [ :row | 
            row 
              add: #usernameLabel width: self labelWidth; 
              add: #usernameField ] 
          height: self inputTextHeight; 
          newRow: [ :row | 
            row 
              add: #passwordLabel width: self labelWidth; 
              add: #passwordField ] 
          height: self inputTextHeight ]; 
       yourself 

LoginModel class>>labelWidth
^((StandardFonts defaultFont widthOfString: 'Password') max: 
(StandardFonts defaultFont widthOfString: 'Username'))+12

Please note that there are still several places in Spec where 
hardcoded values like 12 are used instead of semantic values.
This value should actually be dependent on font size.
Having the label texts twice in the code should also be avoided.

LoginModel class>>textFieldWidth
^(StandardFonts defaultFont widthOfString: 'longest.email@addressThatShould.fit')+12

LoginModel>>initialExtent
^(3*12+self class labelWidth+ self class textFieldWidth) @ (5*self class buttonHeight)

There are several calculated values missing:
width = outside border + labelWidth + label field separator+fieldWidth+outside border
height = dialog title + textInput height + separator + textInput height+ separator+button height + outside border

