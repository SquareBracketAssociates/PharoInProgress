{ "title": "Simple statistics and modelisations" }

This chapter will accompany you in your Data Mining analyzes from the import of data into Pharo, to their analysis using a simple but accurate package for statistics based on SciSmalltalk, and their modelisation using Roassal.

As data to analyze in the incoming examples, we will use the Iris Dataset. It contains 50 samples from each three classes of iris flowers Frank and Asuncion, 2010. One class is linearly separable from the other two, while the latter are not linearly separable from each other.  There
are five attributes in the dataset:

#sepal length in cm
#sepal width in cm
#petal length in cm
#petal width in cm
#class: Iris Setosa, Iris Versicolour, or Iris Virginica

Let's start ! From now on, it will be assumed that the reader has a Pharo image opened with a recent version of Roassal and R-SimpleStat installed in order to try the examples.

To get R-SimpleStat, Roassal2 and SciSmalltalk execute in your fresh Pharo image:
[[[
Gofer new
smalltalkhubUser: 'PierreChanson' project: 'R-SimpleStat';
package: 'ConfigurationOfSimpleStat';
load. ConfigurationOfSimpleStat load
]]]

For NeoCSV, later use to import csv files:
[[[
Gofer new
smalltalkhubUser: 'SvenVanCaekenberghe' project: 'Neo';
package: 'ConfigurationOfNeoCSV';
load. ConfigurationOfNeoCSV load
]]]

In any case we will try to make this examples as clear as possible, and will always be executable in a Pharo workspace. Moreover, notice that we will show simple examples, the most direct way to the objective, it is up to the reader to improve them.

!!Datasets, Import and Export

The challenge here will most likely be to import data inside Pharo in order to process and modelize them later on. 

To import from CSV format we will use the NeoCsv package. Let's assume that we dispose of this "iris.csv" file in the workdirectory of our Pharo image. This datadat can be found at *https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data* and looks like this:

[[[
5.1,3.5,1.4,0.2,Iris-setosa
4.9,3.0,1.4,0.2,Iris-setosa
4.7,3.2,1.3,0.2,Iris-setosa
4.6,3.1,1.5,0.2,Iris-setosa
5.0,3.6,1.4,0.2,Iris-setosa
5.4,3.9,1.7,0.4,Iris-setosa
4.6,3.4,1.4,0.3,Iris-setosa
5.0,3.4,1.5,0.2,Iris-setosa
4.4,2.9,1.4,0.2,Iris-setosa
4.9,3.1,1.5,0.1,Iris-setosa
5.4,3.7,1.5,0.2,Iris-setosa
4.8,3.4,1.6,0.2,Iris-setosa
4.8,3.0,1.4,0.1,Iris-setosa
4.3,3.0,1.1,0.1,Iris-setosa
5.8,4.0,1.2,0.2,Iris-setosa
5.7,4.4,1.5,0.4,Iris-setosa
5.4,3.9,1.3,0.4,Iris-setosa
5.1,3.5,1.4,0.3,Iris-setosa
5.7,3.8,1.7,0.3,Iris-setosa
5.1,3.8,1.5,0.3,Iris-setosa
etc.
]]]

The first step is to import the content of the file in the workspace and create a read stream:     
[[[
('iris.csv' asFileReference contents readStream)
]]]

Then we read this stream with NeoCSVReader, knowing or separators are comas, the delimiter by default:
[[[
(NeoCSVReader on: ('iris.csv' asFileReference contents readStream) ) upToEnd.
]]]

At this point or data are imported in Pharo and perfectly usable !

Note that by inspecting it we get an Array (size 150), of arrays (size 5), which represent well our iris data.

@@todo could be interesting to have a method summary that create a table resume of our data

We can also import the csv file from an URL. In that case:

[[[
(NeoCSVReader on: ('myUrl' asUrl retrieveContents readStream) ) upToEnd.
]]]

We can easily export data to csv format using NeoCSVWritter. For example:

[[[
String streamContents: [ :stream |
	   (NeoCSVWriter on: stream)
	   nextPutAll: #( (x y z) (10 20 30) (40 50 60) (70 80 90) ) ].
]]]

@@todo A database data import / export example

@@todo See common formats

To export the following produced modelisation made with Roassal, we canuse the Pdf, Svg or Html embeded with Roassal. RTHTML5Exporter, RTSVGExporer etc.

!!Common analyses and modelisations

Now our data are imported, we are ready to process them. We will first perform the classic analyses and graphs. Coming back to our iris.csv content, let's create an histogram on about the sepal lengths.

First we will process a bit our data to obtain usable data in a collection for our histogram. As we just imported our data from csv we will change the four first fields from String to Integer, and puts our data in a variable:

[[[
iris := (NeoCSVReader on: ('iris.csv' asFileReference contents readStream) ) 
   	  addIntegerField; addIntegerField; addIntegerField; addIntegerField; addField; upToEnd.
]]]	  

We now need to take the first row of theses data and ask RSimpleStat to make the histogram:
[[[
(iris collect: [ :i | i first ]) simpleHistogram
]]]	  

and obtain our first histogram. *histogramOne* 

+Histogram 1>file://figures/histo1.png|width=50|label=histogramOne+

@@note As reminder, this simple histogram is made using the class RSHistogram (RSimpleStat package), based on SOptimizedDistribution class (SimpleStat package) depending on the DhbHistogram class from SciSmalltalk. RSimpleStat reunite Roassal2 and SciSmalltalk to visualize statistics.

Having a look to the method #simpleHistogram:, we can easily find our base builders structure and customize our own visualization easily:
[[[
b := RTGrapher new.

ds := RTHistogramSet new.
ds distribution: SOptimizedHistogram new.
ds points: (iris collect: [ :i | i first ]).
ds barShape color: Color orange.
		
b add: ds. 
b axisX title: 'Sepal.Length'.
b axisY title: 'Frequency'.
b build
]]]

We create an instance of RTGrapher and an instance of RTHistogramSet. We define the points of our data set, we define which column to take in account, we also define that we want the SOptimizedHistogram distribution, using SciSmalltalk. We can change the color, add the data set to the grapher, change the axis title and build *histogramTwo*.

+Histogram 2>file://figures/histo2.png|width=50|label=histogramTwo+

In a same way than histogram, you can generate a density plot based on a normal distribution using the SDensity class of SimpleStat or from a SequenceableCollection with #density, a method from the RSimpleStat package.

[[[
(iris collect: [ :i | i first ]) density
]]]
+Density plot>file://figures/plot1.png|width=50+

To obtain a pie chart we need a frequency of each iris names that can be obtain in an annoted array this way:

[[[
ds := RTDistribution new on: (iris collect: [ :i | i last ]); annotatedFrequencyOfDifferentObjects
]]] 

The algorithm is quite easy, we can do another one on our own:
[[[
ds := iris collect: [ :i | i last ].	

ds := (ds asSet collect: [ :name |
	{(ds count: [ :i | i = name]). name}
	 ]) asArray.
]]]

Then we can get a pie chart with:
[[[
b := RTPieBuilder new.
b interaction popup.
b objects: ds.
b slice: #first.
b normalizer distinctColor.	
b labelled: #second.
b build.
]]]
+Pie chart>file://figures/pie1.png|width=50+

To do a bar plot we use now the RTGrapher with RTData:
[[[
b := RTGrapher new.	
dt := RTData new.
dt points: ds.
dt y: #first.
dt barShape color: Color darkGray; width: 50.
dt barChartWithBarTitle: #second.
b add: dt.
b axisX noTick; noLabel.
b build.
]]]
+Bar plot>file://figures/bar1.png|width=50+

!!Analyzes on multiple variables

First we will investigate covariance between columns of our data. Let's take out the last column:
[[[
iris := (NeoCSVReader on: ('iris.csv' asFileReference contents readStream) ) 
   	  addIntegerField; addIntegerField; addIntegerField; addIntegerField; addField; upToEnd.

ds := iris collect: [ :i | i allButLast ].	
]]]	

Then we can get or covariance matrix using the SCovarianceMatrix class from SimpleStat:
[[[
matrix := SCovarianceMatrix new on: ds; matrix.
]]]	

And print the result in a nice table using RSTable from RSimpleStat:
[[[
RSTable new matrix: matrix; columnAndRowTitles: #('Sepal.Length' 'Sepal.Width' 'Petal.Length' 'e boPetal.Width'); render
]]]
+Covariance matrix>file://figures/table1.png|width=80+

We can get a correlationMatrix from our covariance matrix easily:
[[[
matrix := SCovarianceMatrix new on: ds; correlationMatrix.
]]]	

and print it the same way:
[[[
RSTable new matrix: matrix; columnAndRowTitles: #('Sepal.Length' 'Sepal.Width' 'Petal.Length' 'e boPetal.Width'); render
]]]
+Correlation matrix>file://figures/table2.png|width=80+

Also a graph of bar plots will show the distribution of the sepal legnth on each species of iris. 

We will create in this part a graph of box plots over the sepal length, one for each of the different species of iris. We first need to divide our data to collect a collection per different species:

[[[
species := (iris collect: [ :i | i last ]) asSet.
speciesCollections := species collect: [ :s | iris select: [:i | i last = s]].
]]] 

Then we collect their sepal length:
[[[
sepalLengthCollections := speciesCollections collect: [ :col | col collect: [ :i | i first ] ].
]]]

We now use the Roassal class RTBoxPlotDataSet combined with RTGrapher:

[[[
b := RTGrapher new.
sepalLengthCollections do: [ :i | | ds |
	ds := RTBoxPlotDataSet new.
	ds points: i.
	b add: ds.].
b build.
]]]
+Boxplot>file://figures/boxPlot.png|width=80+

Here we create a scatter plot with the Sepal Width and the Sepal Length. As before we collect Sepal Width and lenght for each of different species:

[[[
sepalWidthLengthCollections := speciesCollections collect: [ :col | col collect: [ :i | {i first. i second} ] ].
]]] 

Now we can define a color identity of each species to difference them on the graph, and create our scatter plot using RTGrapher:

[[[
colorId := RTMultiLinearColorForIdentity new colors: {Color red. Color yellow. Color green }; objects: (sepalWidthLengthCollections asArray).
	
b := RTGrapher new.
sepalWidthLengthCollections do: [ :i | 
	| ds |
	ds := RTDataSet new 
	points: i;
	x: [ :m | m first ];
	y: [ :m | m second ].
	ds dotShape circle color: ((colorId rtValue: i) alpha: 0.5); size: 5.
	b add: ds.	
	].
b build.
]]]
+Scatterplot>file://figures/scatter1.png|width=80+

@@note To distinguish the probable overlaps between points, we can define a weaker alpha value for colors

From here we can easily produce a level plot, giving to our scatter plot a gradient color to represent the Petal Width of our points. We also have to collect the Petal Width:

[[[
sepalWidthLengthCollections := speciesCollections collect: [ :col | col collect: [ :i | {i first. i second. i fourth} ] ].

colorId := RTMultiLinearColorForIdentity new colors: {(Color veryLightGray). (Color black) }; objects: ((sepalWidthLengthCollections flatCollect: [:col | col collect: [:i | i third] ]) asArray sort).
]]]

And the grapher, only the shape and color change, using the Petal Width:
[[[
b := RTGrapher new.
sepalWidthLengthCollections do: [ :i | 
	| ds |
	ds := RTDataSet new 
	points: i;
	x: [ :m | m first ];
	y: [ :m | m second ].
	ds dotShape rectangle color: [ :m | (colorId rtValue: m third)] ; size: 5.
	b add: ds.	
	].
b build.
]]]
+Level Plot>file://figures/levelPlot.png|width=80+
