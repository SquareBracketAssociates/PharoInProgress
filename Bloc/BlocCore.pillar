{{title: Bloc core}}
{{author: Alain Plantec}}

! Bloc: a new morph framework

In this chapter you will learn about *Bloc>http://www.smalltalkhub.com/#!/~AlainPlantec/Bloc*, a new 2D graphical framework that has been redesigned from scratch. 
Note that we did not say that Bloc is a new Morphic Framework. Morphic is just the current 2D graphical framework of Pharo. 
Bloc has been designed to be able to embed Morphic elements so that we can use Morphic widgets during the building of Bloc.
Thus, in a first step, backward compatibility with Morphic is kept. This means that Morphic based user interfaces can be displayed within Bloc.
But the inverse is not true, Bloc user interfaces can not be displayed within a Morphic World. 
When we will have enough widgets in Bloc, we will be able to make a big jump and completely separate Bloc from Morphic. 

We describe the overall architecture and the key players of Bloc. Then we present a quick tour of the Bloc core. 
In this quick tour, a lot of examples are commented-out. These examples are chosen to cover the main aspects of the Bloc core from the programmer's point of view.

!! What is Bloc
Bloc is a complete rewrite of an infrastructure to display 2D graphical element such as elementary graphical objects 
and widgets. Bloc is composed of three main categories of entities: entities managing the runtime 
(event dispatch, alarm, main rendering loop), basic graphical elements such as images, label, and more advanced widgets 
(to be developed):

- An infrastructure. The new infrastructure is roughly composed of spaces (managed by a single universe) and a rendering loop manager and helper objects.
- Basic morphs. They are composed of a simple hierarchy whose root is ==BlMorph==. Each morph is potentially composed of a view, an instances of ==BlMorphView== or of one of its subclasses (the view manages the rendering) and an event listener chain (that handles interactions and implements event reactions).
- Widgets. Each widgets is composed of a widget model implemented following a Model View Presenter style

!! Installing Bloc
The package repository of Bloc is in Smalltalkhub.

[[[label=Bloc-repository|caption=The Bloc repository at Smalltalkhub|language=Smalltalk
	MCSmalltalkhubRepository
		owner: 'AlainPlantec'
		project: 'Bloc'
		user: ''
		password: ''
]]]

Just install the ConfigurationOfBloc package. Then evaluate the Script *BlocInstall*.

[[[label=BlocInstall|caption=Installation of Bloc through ConfigurationOfBloc|language=Smalltalk
ConfigurationOfBloc loadBleedingEdge
]]]

After having installed Bloc, you can see a new submenu in the world menu as shown in Figure *bloc-worldmenu*. Then, just create a new bloc space with the ''New Bloc space'' sub-item and switch to your first Bloc space. 

Being in a Bloc space, the only difference consists in the world-menu invocation: in Bloc, the world-menu is invoqued with the right mouse button. Normally, you should be able to open any Morphic tools and use it as in a Morphic world.

+The new world-menu item added after Blov installation>file://figures/bloc-worldmenu-item.png|width=40|label=bloc-worldmenu+

!!What is a morph 
All objects that you can see on the screen are morphs. The Pharo screen itself is a morph. A morph may be simple or composed of other morphs. As examples, a button may be a simple morph whereas a window is a composed morph. 

A simple morph is an instance of ==BlMorph==. Basically, a ==BlMorph== has two kinds of responsibilities: is has to display itself and it has to answer to events. In order to display itself, it stores its own extent and applies affine transformations. In order to answer to events, it defines the behavior that is runned when an event is received and this is the case for all possible kinds of events.

A composed morph is an instance of ==BlCompositeMorph==, a direct subclass of ==BlMorph==. ==BlCompositeMorph== specificity is simply to maintains a collection of submorphs. Moreover, it can use a particular layout strategy to automatically maintain the position and the extent of its submorphs.

+The anatomy of a BlCompositeMorph>file://figures/BlMorph-inst-vars.png|width=50|label=BLCompositeMorph-anatomy+

Figure *BLCompositeMorph-anatomy* presents a table with all instance variables of a composite morph opened in a world. To browse this table by yourself, just evaluate the Script *BlCompositeMorph-opening*. When you evaluate it, don't bother if you do not see the composite morph in the screen, it is explained later.
[[[label=BlCompositeMorph-opening|caption=Opening an empty composite morph|language=Smalltalk
BlCompositeMorph new openInWorld inspect.
]]]
For now, let's focus on the table of instance variables shown in Figure *BLCompositeMorph-anatomy*:
- announcer: a morph has an announcer
!! The Bloc Infrastructure
In this section we  present the main classes supporting the infrastructure (event dispatching, alarm, display management). 

Figure *infrastructure-elements* shows the main elements of the Bloc infrastructure. A Bloc morph is an instance of ==BlMorph== or of one of its subclasses. A Bloc morph lives in a current ''space'' and can be displayed when it is added in the space morph (an instance of ==BlSpaceMorph==) of the current space.

The space acts as a mediator between a low-level event fetcher (an instance of ==BlVMEventFetcher== ), a high-level event handler (an instance of ==BlEventHandler==), a main loop manager (an instance of ==BlMainLoopManager==), and the space morph (an instance of ==BlSpaceMorph==). This mediation works basically as follow:
- the VM event fetcher gets raw events from the VM and passes them to the high-level event handler. This last one dispatches the events coming from the vm event fetcher and sends them either to the space morph or directly to the morph which has the focus (keyboard or mouse). When the space morph receives an event then it tries to look-down the morph that can react to it;
- the main loop manager is related to a space and holds an alarm queue and a deferred action list. It implements an infinite loop. At each round, the current space morph is redrawn, the low-level event fetcher is activated, deferred actions and ready alarms are runned.

+The main elements of Bloc infrastructure>file://figures/bloc-core-main-elements.png|width=70|label=infrastructure-elements+


!!! Universe 

Universe and spaces are not graphical objects. They serve as model for the infrastructure. 
There is one single universe which manages a list of spaces. The class ==BlUniverse== defines a singleton. Thus, the system has one unique universe. Its responsibilities are to create, to delete and to activate spaces. 

In addition, a ==BlUniverse== also offers a global announcer. This global announcer is used for global ticking behavior of the ==BlMainLoopManager==. As an example, alarms are managed using this global ticking mechanism as shown in ==BlAlarmQueue>>start== and ==BlAlarmQueue>>subscribesToTicks==.

!!! Spaces
The class ==BlSpace== is the root of the space class hierarchy. Its subclasses are for Morphic and Bloc respectively. 

A ==BlSpace== is a uniquely identified object (via a name). A space is owned by a Universe. A space is responsible to start and shutdown a root morph: ==WorldMorph== in Morphic and ==BlSpaceMorph== in Bloc. 

At the current time, a space has also a manager which bridges to the current UIManager. A ==MorphicUIManager== instance is associated with the ==BlMorphicSpace== and a ==BLMorphicUIManager== is associated with each ==BlBlocSpace==. The UIManager is kept for backward compatibility with the Pharo infrastructure regarding the management of the UI process. In the future we expect that it will disappear as well as UIManager.

!!!! Getting the running space
As shown in Script *gettingRunningSpace*, it is possible to get the running space by sending the #runningSpace message to the current universe. Then, From the space, one can get its root morph, its hand, its event handler or its main loop manager.

[[[label=gettingRunningSpace|caption=Getting the running space from the current BlUniverse instance|language=Smalltalk
BlUniverse default runningSpace
]]]

!!!! Getting the space of a morph
The space of a morph is always available even if the morph is not opened (not added directly or indirectly as a space morph child). In fact, in Bloc, every morph stores the reference of its space in its ''space'' instance variable. This instance variable is initialized by the ''basicNew'' method which is redefined in the BlMorph class (see Script *BlMorphBasicNew*).

[[[label=BlMorphBasicNew|caption=The BlMorph class #basicNew redefinition|language=Smalltalk
BlMorph class>>basicNew
	^ super basicNew space: BlUniverse default runningSpace ]]]
	
!!!! Space startup and shutdown

Space startup and shutdown are implemented by BlSpace>>startUp, BlSpace>>resume and BlSpace>>shutdown. When a Bloc space is started, the UI manager is first asked to start a new rendering loop process. This is done through an #installAsDefault message sent to the manager of the space. In Bloc, the rendering loop process is implemented by ==BlMainLoopManager==. After the rendering loop process has been started, the VM event fetcher is started, then the root morph is fully displayed, the alarm queue is started and morph stepping is restarded recurssively from the root morph. 

When a Bloc space is shut down, morph stepping, the alarm queue, the VM event fetcher are stopped. Note that the rendering loop process is actually stopped just before a new one is started. 

External packages may need to interact with the Bloc infractructure when a space is started or stopped. As an example, in Bloc, the halo management is implemented as an external package. When a Bloc space is started, then a halo foreground morph is added to the root morph (an instance of BlSpaceMorph) and the ==BlHaloMorph== class is added as an observer of all the mouse events that are sent through the space announcer. When a Bloc space is stopped, the halo foreground morph is removed and the ==BlHaloMorph== class removes itself from the space observers. 

To allow such a pluggable behavior, a pragma based hook	is implemented. See ''#startUpHook'' and ''#shutDownHook'' in ==BlBlocSpace==. This hook works as follow:
- after a space has been started, all methods with the ''spaceStartUp'' pragma keyword are collected and invoked with the started space passed as argument.
- before a space is stopped, all methods with the ''spaceShutDown'' pragma keyword are collected and invoked with the stopped space passed as argument.


[[[label=SpaceStartUpShutDownHook|caption=How the halo package is plugged or unplugged when a Bloc space is started or stopped |language=Smalltalk
BlHaloMorph class>>spaceStartUp: aSpace
	<spaceStartUp>
	aSpace spaceMorph addHaloForegroundMorph.
	aSpace weakSubscribe: BlMouseUpEvent send: #whenMiddleMouseUp: to: self

BlHaloMorph class>>spaceShutDown: aSpace
	<spaceShutDown>	
	aSpace spaceMorph removeHaloForegroundMorph.
	aSpace unsubscribe:  self
]]]

!!! The root morph
There is one and only one root morph per bloc space.
It is the only displayed morph that has no owner (its owner instance variable is nil). 

+The root morph structure>file://figures/space-morph-structure.png|width=70|label=root-morph-structure+

As shown in Figure *root-morph-structure*, by default, its layout is structured as a stack of morphs: each submorph of the space morph constitutes a layer. 
It is composed of 4 layers, distributed from the back to the front as follow:
- the morphic world: it is an instance of ==BlWorldMorph==; it contains all morphs that can be manipulated by the user;
- the tool-tips foreground: it contains the tools-tips that are drawned when the hand stays over a bloc morph (not implemented so far);
- the halo foreground: it is added if the ''Halo'' package is installed. It contains the unique halo if any;
- the hand foreground: it is an instance of ==BlHandForegroundMorph==; it's only submorph is the hand morph.

The deep of a layer (from bottom to top) is given by the value of its layerNumber instance variable which is set with the result of the ''#defaultLayoutNumber'' message. Thus, a specific layer can be added by adding a BlMorph as a submorph of the root morph. As an example, the halo foreground is added if the Halo package is installed. 

!!Simple morphs
==BlMorph== implements the common behavior of all morphs. Its inherits from ==BlView== which brings:
- the management of the geometric properties (extent, bounds managed through a bounds cache), 
- the management of the local coordinates  (bounds and affine transformations with translating, rotating and scaling),
- the visual change reporting and the drawing protocol, and
- the layout management.
==BlMorph== brings additional behaviors for event managing through an event listener chain. 
The visual properties of a ==BlMorph== are managed through an associated view (the view of the ==BlMorph==).

In this Section, we learn how to create and open a simple morph, how to configurate it with a color or a 
fill and how to setup its borders. 

!!!A first Example
The most simple visual entity of Bloc is a ==BlMorph==. A ==BlMorph== can be opened and manipulated with the hand (or the mouse). 
To open a morph (an instance of ==BlMorph==) one can simply evaluate the expression of the script *FirstMorphMinimal*.

[[[label=FirstMorphMinimal|caption=Opening a minimal morph|language=Smalltalk
BlMorph new openInWorld
]]]

As you can see, apparently nothing changed in the world but yes, it works. In fact, a morph is associated with a view. 
This is the responsibility of the morph view to decide how to render the morph. By default, a morph is associated with a minimal view.
This minimal view is an instance of ==BlMinimalView==. A minimal view has an extent but draw nothing. 
But don't worry, to manipulate this morph, the ==halo== is your friend.
By default, the position of a morph is at the top-left corner of its owner.
Move the mouse near the top left of the Pharo screen and click with the middle button (or Alt-Click). You should see the halo as depicted in Figure *Halo0*.

+The halo opened around our first morph>file://figures/halo0.png|width=30|label=Halo0+

Then you can move the morph by dragging the halo, resize it with the yellow handle, open inspectors with the blue one, delete the halo or delete de morph with the black and the red handlles.

!!!Changing the view of a morph
To create a morph with a particular view one have to instantiate one of the subclasses of ==BlMorphView== and to send the #view: 
message to a morph vith the view passed as argument. The entire view hierarchy is presented in Figure *view-hierarchy*.
- ==BlMinimalMorphView==: this is the default transparent view;
- ==BlEnclosedView==: a composite view that can be filled and that can have a border; Its subclasse ==BlRectangleView== is the most used but have also ==BlEllipseView== and ==BlCircleView==;
- ==BlImageView==: a view to draw an image; ==BlFormImageView== is used to draw an image from a ==Form== and BlSvgImageView, to draw a SVG model;
- ==BlPolygonView==: a view used to draw polygons from a list of points; the polygon border can be straight or curvy;
- ==BlStringView==: a view to draw a strings with a font and a text color; the extent of a ==BlStringView== is computed from the rendered string and the used font;
- ==BlTextView==: a view used to display a ==TxTextModel==; this kind of view is used to build the Bloc text editor;
- ==BlTextLabel==: a view used to display a string but with a ==TxTextModel==; the extent of a ==BlTextLabel== is the one of the rendered ==TxTextModel==;

+The view hierarchy>file://figures/view-hierarchy.png|width=60|label=view-hierarchy+

As an example, to create a rectangle view, ==BlRectangleView== is instantiated. ==BlRectangleView== inherits from ==BlEnclosedView==. 
As a kind of ==BlEnclosedView==, a ==BlRectangleView== can have a fill and can have a border. Creating a morph with a plain rectangular 
view an open it can be programmed as shown in Script *blueMorph*. In the example of script *blueMorph*, an instance of BlRectangleView with a blue color is created. 

[[[label=blueMorph|caption=Opening a blue rectangular morph|language=Smalltalk
| morph view |
view := BlRectangleView new color: Color blue.
morph := BlMorph new view: view.
morph openInWorld
]]]

To associate a morph with a view, one can send the ==#asMorph== message to the view. This is shown by Script *blueMorphV2*.

[[[label=blueMorphV2|caption=Using the #asMorph message|language=Smalltalk
(BlRectangleView new color: Color blue) 
	asMorph openInWorld
]]]

Bloc implements two specific helper methods: ''withRectangleView'' and ''withRectangleViewDo:'' to facilitate the setting of a rectangle view. 
''withRectangleView'' set the view to a ==BlRectangleView== instance. ''withRectangleViewDo:'' set the view to a ==BlRectangleView== instance and evaluate the block passed as argument. 
The new rectangle view is itself passsed as argument to the block. 
Script *blueMorphV3* shows an example: the block passed as argument to ''withRectangleViewDo:'' fills the rectangle view with the 
blue color.

[[[label=blueMorphV3|caption=Opening a blue rectangular morph|language=Smalltalk
BlMorph new 
	withRectangleViewDo: [:v | v color: Color blue]; 
	openInWorld
]]]

!!!!Changing the fill style of an enclosed view

One can use more complex fills than jus a simple color. Bloc has not only color but also gradient, image and 
composite fill styles. The example of Script *rectangleWithLinearGradient* shows the use of a linear gradient fill style. 
The resulting morphs is shown in Figures *linearGradient*.

[[[label=rectangleWithLinearGradient|caption=Creating and using a linear gradient to fill a rectangle view|language=Smalltalk
| morph |
morph := BlMorph new withRectangleViewDo: [ :v | | fill c |
	c := Color yellow.
	fill := (BlLinearGradientFillStyle colors: {c. c alpha: 0.1})
		start: (v width / 2) @ 0;
		stop: (v width / 2) @ v height;
		yourself.
	v fillStyle: fill].
morph openInWorld]]]

The linear gradient is created from a list of colors, the start and the stop positions of the color gradient. 
In the example of Script *rectangleWithLinearGradient*, the yellow gradient is a vertical one that starts at the top-middle and stops at the bottom middle.
+A morph with a linear gradient>file://figures/morph-with-linear-gradient.png|width=8|label=linearGradient+

A linear gradient can also be used to fill a circle view. As an example, in Script *rectangleWithLinearGradient* change the ''#withRectangleViewDo:'' message send with ''#withCircleViewDo:'' to create such a circle view.

!!!! Adding a border

The border of a ==BlRectangleView== and can be set with an instance of a subclass of ==BlRectangleBorder==. 
As shown in Script *morphWithRedBorder*, to decorate a view with a colored border one can use an instance of ==BlSolidRectangleBorder==. The morph built with *morphWithRedBorder* is shown in Figure *redBorder*.

[[[label=morphWithRedBorder|caption=Creating and using a solid border|language=Smalltalk
| view morph |
view := BlRectangleView new color: Color white; 
	borderStyle: (BlSolidRectangleBorder new color: Color red; width: 2).
morph := view asMorph.
morph openInWorld]]]

+A white rectangle morph with a plain red border>file://figures/white-rectangle-with-red-border.png|width=8|label=redBorder+

==BlSolidBorder== is the most used border style. Thus, the methods ''withSolidBorder'' and ''withSolidBorderDo:'' are available to facilitate
the initialization of an enclosed view. Script *morphWithRedBorder2* shows the use of ''withSolidBorderDo:'' in a second version of Script
*morphWithRedBorder*.

[[[label=morphWithRedBorder2|caption=Initializing a solid border with the ''withSolidBorderDo:'' method|language=Smalltalk
| view morph |
view := BlRectangleView new color: Color white; 
	withSolidBorderDo: [:b | b color: Color red; width: 2].
morph := view asMorph.
morph openInWorld]]]

!!!!! The join style
With a join style, one can change the way the lines of a border a joined together. As shown in Figure *border-join-style*, the border join style can be of three kind: ''miter'' (the default one), ''round'' or ''bevel''.
To change the join style, one can send the ''#withJoinMiter'', the ''#withJoinRound'' or the ''#withJoinBevel'' message to the border. 
An example is shown is Script *changing-join-style*.

+The three kinds of border join style>file://figures/rect-with-miter-round-bevel-border.png|width=40|label=border-join-style+

[[[label=changing-join-style|caption=changing the join style of a border|language=Smalltalk
(BlRectangleView new
	extent: 70 @ 50;
	withSolidBorderDo: [ :b | 
		b
			width: 8;
			color: Color black;
			withJoinBevel ];
	asMorph) openInWorld]]]

!!!!! Round corners
The visual effect of the join style may be limited, especially with a thin border. Moreover, the join style has no impact on the inner 
space which remains rendered as a straight rectangle. 

+The corner radius>file://figures/corner-radius.png|width=25|label=corner-radius+

To get round corners and a round inner space, one can change the corner radius of a solid border style. Figure *corner-radius* depicts 
what is a rectangle corner radius. One can change its value with the ''#cornerRadius:'' message. This message is sent to the border style 
as in Script *creating-a-rectangle-with-round-corners*. Figure *rectangle-with-round-corners* shows the resulting rectangle.

+A gray rectangle with round corners>file://figures/rectangle-with-round-corner.png|width=25|label=rectangle-with-round-corners+

[[[label=creating-a-rectangle-with-round-corners|caption=creating a round rectangle|language=Smalltalk
BlMorph new
	withRectangleViewDo: [ :v | 
		v
			color: Color lightGray lighter;
			withSolidBorderDo: [ :b | 
				b
					cornerRadius: 15;
					width: 1;
					color: Color black ] ];
	extent: 150 @ 25;
	openInWorld]]]
	
!!!!! Dashes

A solid border can be configurated to draw a dashed border. To set a dashed border, the ''#dashes:'' message is sent to a border with an array 
of integer values. The array must contain one or more couples of integers. The first value of the couple is for the number of pixels
of a dash and the second value is for the white space length. In script *dash-borders* the array
is ''#(2 5)''. It configurates a border with a dash of length 2 followed by a space of length 5. The result of Script
*dash-borders* is shown by the left morph of Figure *fig-dash-borders*. Several couples can be used. As an example, 
the border of the right morph of Figure *fig-dash-borders* is configurated with the following array: ''#(2 5 5 2 10 2)''.


[[[label=dash-borders|caption=Setting a simple dashed border|language=Smalltalk
BlMorph new
	extent: 150 @ 25;
	withRectangleViewDo: [ :v | 
		v color: Color lightGray muchLighter;
			withSolidBorderDo: [ :b | 
			b
				width: 2;
				cornerRadius: 15;
				color: Color black;
				dashes: #(2 5) ];			
		yourself ];
	openInWorld]]]

+Dash border examples>file://figures/dash-borders.png|width=55|label=fig-dash-borders+

!!!!Affine transformation
Each morph owns a transform which is used by the Athens underlying rendering framework and which represents an interface for coordinate system transformations. The transform is an instance of ==AthensAffineTransform==. Basically, the transform of a morph should not be directly manipulated. Instead, its public protocol and the public interface of ==BlProtoview== should be used for translating, rotating, scaling, shearing, global to local and local to global transformations. The public interface of Athens surface can also be used to implement specific rendering (for an animation for example).

Bloc uses a local coordinate system. It means that the position of a morph is given according to the coordinate system defined by its owner. Thus, translating a morph means changing its position according to the position of its owner. The position of a morph can be got and changed with the ''#position'', the ''#position:'' and the '#translateBy:' messages. These messages read or update the transform translation.

Rotating, scaling and shearing follow the same logic. These transformations are managed by mean of the ''#rotateByDegrees:'', the ''#rotateByRadians:'', the ''#scaleBy:'' and the ''#scaleX:Y:'' messages. Corresponding methods are part of the public interface of ==BlProtoView==.

It is important to notice that the transform is used for Athens rendering. In fact is has nothing to do with the bounds of a morph. As an example, the bounds origin of a morph is always the constant point 0@0 whatever its transform. As a fundamental rule, the bounds of a morph stays unchanged in case of translating, rotating or of scaling. 

!!!Composing views
A composite view can be used to elaborate view composed by several subviews. A ==BlCompositeView== is a kind of rectangle view that can contains other view.


!!!Composing morphs

!!Layout management


!! Event management
In this Section we learn how events are managed to make morphs live. First we present what is an event, 
how it is created by the infrastructure and how the infrastructure can be customed and adapted at a global level. Then we learn how finally
evens are distributed to morphs and again and how to manage the hooks provided locally by morphs.

!! Alarms and stepping

!! Interacting with announcements

