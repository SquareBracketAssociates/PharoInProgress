Object subclass: #DOAddress	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOAddress commentStamp: '<historical>' prior: 0!!!DOAddress methodsFor: 'as yet unclassified' stamp: 'StephanEggermont 5/7/2014 18:35'!fullName	^'Address'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DOAddress class	instanceVariableNames: ''!!DOAddress class commentStamp: '<historical>' prior: 0!!!DOAddress class methodsFor: 'as yet unclassified' stamp: 'StephanEggermont 5/7/2014 20:23'!title	"override in subclasses"	^'Address'! !!DOAddress class methodsFor: 'as yet unclassified' stamp: 'StephanEggermont 5/7/2014 20:23'!fields	^self subclassResponsibility ! !DOAddress subclass: #DOEmailAdres	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOEmailAdres commentStamp: '<historical>' prior: 0!!DOAddress subclass: #DOPhoneNumber	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOPhoneNumber commentStamp: '<historical>' prior: 0!!DOAddress subclass: #DOPostalAddress	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOPostalAddress commentStamp: '<historical>' prior: 0!!DynamicComposableModel subclass: #DOPartyEditor	instanceVariableNames: 'partyClass'	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOPartyEditor commentStamp: '<historical>' prior: 0!!!DOPartyEditor methodsFor: 'protocol' stamp: 'StephanEggermont 4/24/2014 17:25'!title	^ partyClass title! !!DOPartyEditor methodsFor: 'protocol' stamp: 'StephanEggermont 4/24/2014 17:27'!initialExtent	^ 300@(self class inputTextHeight*(3+partyClass fields size))! !!DOPartyEditor methodsFor: 'initialization' stamp: 'StephanEggermont 4/24/2014 21:32'!initializeWidgets	|models|	models := OrderedCollection new.	partyClass fields do: [ :field | models add: field; add: #TextInputFieldModel  ].	self instantiateModels: models.	layout := SpecLayout composed		newColumn: [ :col |			partyClass fields do: [ :field | 				col add: field height: self class inputTextHeight]];		yourself .	 self widgets keysAndValuesDo:  [ :key :value |		value autoAccept: true;			entryCompletion:nil;			ghostText: key.		self focusOrder add: value] .! !!DOPartyEditor methodsFor: 'accessing' stamp: 'StephanEggermont 4/24/2014 17:25'!partyClass: aPartyClass	partyClass := aPartyClass! !!DOPartyEditor methodsFor: 'accessing' stamp: 'StephanEggermont 4/24/2014 23:07'!partyClass	^partyClass! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DOPartyEditor class	instanceVariableNames: ''!!DOPartyEditor class commentStamp: '<historical>' prior: 0!!!DOPartyEditor class methodsFor: 'instance creation' stamp: 'StephanEggermont 4/24/2014 18:15'!on: aPartyClass	^self basicNew		partyClass: aPartyClass;		initialize;		yourself! !Object subclass: #DOScreenshotExporter	instanceVariableNames: 'directory'	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOScreenshotExporter commentStamp: '<historical>' prior: 0!!!DOScreenshotExporter methodsFor: 'accessing' stamp: 'StephanEggermont 5/7/2014 23:03'!writeMorph: aMorph as: aFileName	(directory / aFileName) ensureDelete.	PNGReadWriter putForm: aMorph imageForm onFileNamed: (directory / aFileName).! !!DOScreenshotExporter methodsFor: 'accessing' stamp: 'StephanEggermont 5/7/2014 23:03'!writeWorldAs: aFileName	(directory / aFileName) ensureDelete.	PNGReadWriter putForm: World imageForm  onFileNamed: (directory / aFileName).! !!DOScreenshotExporter methodsFor: 'accessing' stamp: 'StephanEggermont 5/7/2014 22:31'!directory	^ directory! !!DOScreenshotExporter methodsFor: 'accessing' stamp: 'StephanEggermont 5/7/2014 23:03'!writeMorph: aMorph rectangle: aRectangle as: aFileName	(directory / aFileName) ensureDelete.	PNGReadWriter putForm: (aMorph imageFormForRectangle: aRectangle) onFileNamed: (directory / aFileName).! !!DOScreenshotExporter methodsFor: 'accessing' stamp: 'StephanEggermont 5/7/2014 22:31'!directory: anObject	directory := anObject! !!DOScreenshotExporter methodsFor: 'accessing' stamp: 'StephanEggermont 5/7/2014 23:03'!writeForm: aForm as: aFileName	(directory / aFileName) ensureDelete.	PNGReadWriter putForm: aForm onFileNamed: (directory / aFileName).! !Object subclass: #DOPartiesModel	instanceVariableNames: 'parties'	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOPartiesModel commentStamp: '<historical>' prior: 0!!!DOPartiesModel methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 15:56'!parties	^parties ifNil: [ parties := OrderedCollection new ]! !!DOPartiesModel methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 15:55'!parties: aCollection	parties := aCollection! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DOPartiesModel class	instanceVariableNames: 'default'!!DOPartiesModel class commentStamp: '<historical>' prior: 0!!!DOPartiesModel class methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 15:55'!default	^default ifNil: [ default := self new ]! !!DOPartiesModel class methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 15:55'!reset	default := nil! !Object subclass: #DOParty	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOParty commentStamp: '<historical>' prior: 0!!!DOParty methodsFor: 'as yet unclassified' stamp: 'StephanEggermont 4/22/2014 14:18'!fullName	^'Full name'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DOParty class	instanceVariableNames: ''!!DOParty class commentStamp: '<historical>' prior: 0!!!DOParty class methodsFor: 'accessing' stamp: 'StephanEggermont 4/24/2014 17:26'!title	"override in subclasses"	^'Party'! !!DOParty class methodsFor: 'accessing' stamp: 'StephanEggermont 4/24/2014 17:28'!fields	^self subclassResponsibility ! !DOParty subclass: #DOCompany	instanceVariableNames: 'companyName'	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOCompany commentStamp: '<historical>' prior: 0!!!DOCompany methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 22:00'!companyName: anObject	companyName := anObject! !!DOCompany methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 22:00'!companyName	^ companyName ifNil: ['']! !!DOCompany methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 22:00'!fullName	^ self companyName ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DOCompany class	instanceVariableNames: ''!!DOCompany class commentStamp: '<historical>' prior: 0!!!DOCompany class methodsFor: 'accessing' stamp: 'StephanEggermont 4/24/2014 17:26'!title	^'Company'! !!DOCompany class methodsFor: 'accessing' stamp: 'StephanEggermont 4/24/2014 17:27'!fields	^#(#companyName)! !DOParty subclass: #DOPerson	instanceVariableNames: 'firstName lastName'	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOPerson commentStamp: '<historical>' prior: 0!!!DOPerson methodsFor: 'as yet unclassified' stamp: 'StephanEggermont 4/22/2014 15:50'!fullName	^self firstName, ' ', self lastName! !!DOPerson methodsFor: 'as yet unclassified' stamp: 'StephanEggermont 4/22/2014 15:50'!firstName	^firstName ifNil: [ '' ]! !!DOPerson methodsFor: 'as yet unclassified' stamp: 'StephanEggermont 4/22/2014 15:51'!firstName: aString	firstName := aString! !!DOPerson methodsFor: 'as yet unclassified' stamp: 'StephanEggermont 4/22/2014 15:50'!lastName	^lastName ifNil: [ '' ]! !!DOPerson methodsFor: 'as yet unclassified' stamp: 'StephanEggermont 4/22/2014 15:51'!lastName: aString	lastName := aString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DOPerson class	instanceVariableNames: ''!!DOPerson class commentStamp: '<historical>' prior: 0!!!DOPerson class methodsFor: 'accessing' stamp: 'StephanEggermont 4/24/2014 18:17'!title	^'Person'! !!DOPerson class methodsFor: 'accessing' stamp: 'StephanEggermont 4/24/2014 17:28'!fields	^#(#firstName #lastName)! !ComposableModel subclass: #DOPartiesList	instanceVariableNames: 'search addPerson addCompany list'	classVariableNames: ''	poolDictionaries: ''	category: 'Domain-Parties'!!DOPartiesList commentStamp: '<historical>' prior: 0!!!DOPartiesList methodsFor: 'refreshing' stamp: 'StephanEggermont 4/24/2014 20:02'!refreshItems	|searchString|	searchString := search text asLowercase.	list 		items: (DOPartiesModel default parties select: [: each | 			searchString isEmpty or: [each fullName asLowercase includesSubstring: searchString]]);		displayBlock: [ :each |  each fullName].! !!DOPartiesList methodsFor: 'protocol-events' stamp: 'StephanEggermont 4/22/2014 16:12'!whenAddPersonClicked: aBlock 	addPerson whenActionPerformedDo: aBlock! !!DOPartiesList methodsFor: 'protocol-events' stamp: 'StephanEggermont 4/22/2014 22:02'!whenAddCompanyClicked: aBlock 	addCompany whenActionPerformedDo: aBlock! !!DOPartiesList methodsFor: 'protocol-events' stamp: 'StephanEggermont 4/22/2014 14:22'!whenSelectedItemChanged: aBlock 	list whenSelectedItemChanged: aBlock! !!DOPartiesList methodsFor: 'initialization' stamp: 'StephanEggermont 5/7/2014 18:07'!editParty	|party edit|	party := list selectedItem.	edit := (DOPartyEditor on:  party class) openDialogWithSpec.	self editParty: party in: edit	! !!DOPartiesList methodsFor: 'initialization' stamp: 'StephanEggermont 5/8/2014 00:03'!initializeWidgets	search := self newTextInput.	search autoAccept: true;		entryCompletion:nil;		ghostText: 'Search'.	addPerson := self newButton.	addPerson label: '+Person'.	addCompany := self newButton.	addCompany label: '+Company'.	list := self instantiate: NewListModel.	list dragEnabled: true;		wantDropBlock: [ :draggedItem :event :source | false].	list menu: [ :aMenu |	aMenu addGroup: [ :aGroup |		aGroup addItem: [ :anItem |			anItem 				name: 'Edit';				action: [self editParty]];			addItem: [  :anItem |				anItem 					name: 'Delete';					action: [self deleteSelectedParty] ]  ] ].	self refreshItems.	self focusOrder 		add: search;		add: addPerson;		add: addCompany;		add: list ! !!DOPartiesList methodsFor: 'initialization' stamp: 'StephanEggermont 5/7/2014 18:08'!initializePresenter	search whenTextChanged: [ :class | self refreshItems  ].		addPerson action: [  |edit|		edit := (DOPartyEditor on:DOPerson) openDialogWithSpec.		edit okAction: [self addPartyIn: edit]].	addCompany action: [  |edit|		edit := (DOPartyEditor on: DOCompany) openDialogWithSpec.		edit okAction: [self addPartyIn: edit ]].	list handlesDoubleClick: true.	list doubleClickAction: [self editParty] ! !!DOPartiesList methodsFor: 'initialization' stamp: 'StephanEggermont 5/7/2014 18:28'!deleteSelectedParty	|party |	party := list selectedItem.	(self confirm: 'Are you sure') ifTrue: [  		DOPartiesModel default parties remove: party].	self refreshItems	! !!DOPartiesList methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 14:21'!list 	^list! !!DOPartiesList methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 14:24'!items: aCollection	list items: aCollection! !!DOPartiesList methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 16:17'!search	^search! !!DOPartiesList methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 22:01'!addCompany	^addCompany! !!DOPartiesList methodsFor: 'accessing' stamp: 'StephanEggermont 4/22/2014 16:00'!addPerson	^addPerson! !!DOPartiesList methodsFor: 'adding' stamp: 'StephanEggermont 5/7/2014 18:03'!addPartyIn: anEditor	|party|	party := anEditor model partyClass new.	anEditor model partyClass fields do: [ :field |		party perform: (field asMutator) with: (anEditor model perform: field) text ].	DOPartiesModel default parties add: party.	self refreshItems.! !!DOPartiesList methodsFor: 'adding' stamp: 'StephanEggermont 5/7/2014 17:17'!editParty: aParty in: anEditor	aParty class fields do: [ :field |		(anEditor model perform: field) text: (aParty perform: field) ].	anEditor title: 'Edit ',aParty fullName.	anEditor okAction: [ 		anEditor model partyClass fields do: [ :field |			aParty perform: (field asMutator) with: (anEditor model perform: field) text ].		self refreshItems ].! !!DOPartiesList methodsFor: 'protocol' stamp: 'StephanEggermont 4/22/2014 14:22'!title	^ 'Parties'! !!DOPartiesList methodsFor: 'protocol' stamp: 'StephanEggermont 4/22/2014 14:24'!resetSelection	list resetSelection ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DOPartiesList class	instanceVariableNames: ''!!DOPartiesList class commentStamp: '<historical>' prior: 0!!!DOPartiesList class methodsFor: 'specs' stamp: 'StephanEggermont 4/22/2014 22:02'!defaultSpec	<spec: #default>			^SpecLayout composed		newColumn: [ :col |				col newRow: [:row |					row add: #search;						add: #addPerson;						add: #addCompany]					height: ComposableModel toolbarHeight;  					add: #list];		yourself! !