! A Tutorial about Voyage

Voyage is an object to document mapper for MongoDB. It is simple. It ensures object identity.  It provides error-handling. It implements a connection pool.

!! Getting started

!!! Loading Voyage
[[[
Metacello new
	smalltalkhubUser: 'Pharo' project: 'MetaRepoForPharo40'; configuration: 'VoyageMongo';
	load.
]]]

!!! Creating a connection
We will start to connect to the database.

[[[
| repository |
repository := VOMongoRepository host: 'localhost' database: 'superHeroes'.
repository enableSingleton.
]]]

If you are not connected to a database, you can always use “in memory” repository (useful for prototype)

[[[
| repository |
repository := VOMemoryRepository new. 
repository enableSingleton
]]]

We can add a class method to the class ==Hero== that we will define just after.

[[[
Hero class >> setUpConnection

	| repository |
	repository := VOMongoRepository host: 'localhost' database: 'superHeroes'.
	repository enableSingleton.
]]]

!! SuperHeroes

Figure *@HeroesModel* shows the model that we will use for this tutorial. 

+The model>file://figures/HeroesModel.png|width=60|label=HeroesModel+

!!! Heroes and their Powers

[[[
Object subclass: #Hero
   instanceVariableNames: 'name level powers' 
   classVariableNames: ''
   package: 'SuperHeroes'
]]]

[[[   
Hero >> name 
   ^ name
   
Hero >> name: aString 
   name := aString
]]]

[[[
Hero >> level 
   ^ level

Hero >> level: anObject 
   level := anObject
]]]

[[[
Hero >> powers
   ^ powers ifNil: [ powers := Set new ]
]]]

[[[
Hero >> addPower: aPower 
   self powers add: aPower
]]]



[[[
Object subclass: #Power 
   instanceVariableNames: 'name' 
   classVariableNames: '' 
   package: 'SuperHeroes'
]]]

[[[
Power >> name 
   ^ name
   
Power >> name: aString 
   name := aString
]]]

Ajoutez les méthodes ==printOn:== afin d'améliorer 


!! Root classes

Now we have to decide what are the objects that we want to save and query. For this we should declare
the roots of the object graph that we want to save. 
A root can be any class of the system. Declaring a root is done by implement the class method ==isVoyageRoot==.

We will see the implications of defining a root later. For now we just define ==SuperHero== as root. 

[[[
Hero class >> isVoyageRoot 
  ^ true
]]]

[[[
Hero new
   name: 'Spiderman';
   level: #epic;
   addPower: (Power new name: 'Super-strength'); 
   addPower: (Power new name: 'Wall-climbing'); 
   addPower: (Power new name: 'Spider instinct'); 
   save.
Hero new
   name: 'Wolverine';
   level: #epic;
   addPower: (Power new name: 'Regeneration'); 
   addPower: (Power new name: 'Adamantium claws'); 
   save.
]]]


[[[
> show dbs
local        0.078GB
superHeroes  0.078GB

> use superHeroes
switched to db superHeroes

> show collections
Hero
]]]

[[[
> db.Hero.find()[0]
{
	"_id" : ObjectId("d847065c56d0ad09b4000001"),
	"#version" : 688076276,
	"#instanceOf" : "Hero",
	"level" : "epic",
	"name" : "Spiderman",
	"powers" : [
		{
			"#instanceOf" : "Power",
			"name" : "Spider instinct"
		},
		{
			"#instanceOf" : "Power",
			"name" : "Super-strength"
		},
		{
			"#instanceOf" : "Power",
			"name" : "Wall-climbing"
		}
	]
}
]]]