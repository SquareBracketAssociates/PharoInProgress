! Reef: Reconciling Javascript and Seaside

Reef is a framework to build dynamic components embedding Javascript developed by E. Lorenzano. Reef is a complement to Seaside. Reef does not replace Seaside, instead, it makes easier the definition and use of AJAX/Javascript. Reef makes the writing of Ajax interaction much simpler since as a developer there is no need to manipulate Javascript using queries and string concatenation. Reef also integrates smoothly with JS libraries such Bootstrapp.

A reef component can be embedded inside a Seaside one: we call Reef entities components for this reason.  A Seaside component can also be embedded inside a Reef one. 

In this document, we propose you a journey with Reef to show you its power. We will start doing a simple counter application. Then we will take the todo applications and build a user interface using Reef. Then we are going to create a dynamic search of classes, to show basic AJAX interaction, then show some reef widgets. 


!!Installation

To get started with Reef, download the latest Seaside image that you can find on *http://www.seaside.st* then execute the following expression:
SD: point to the CI

[[[{Loading Reef}
Gofer it
	url: 'http://smalltalkhub.com/mc/estebanlm/Reef/main';
	package: 'ConfigurationOfReef';
	load.

"Use  this if you already have Seaside30 and JQueryWidgetBox installed"
(ConfigurationOfReef project version: #stable) load. 

"This loads everything, including Seaside30 and JQueryWidgetBox"
(ConfigurationOfReef project version: #stable) load: 'All'. 
]]]

You can also get access to an image built for you by Jenking and that already contains all the loaded packages SDLM: Is there a CI for reef.

!!A Reef Counter

Let us start to code a simple counter as a reef computer. This example will show how we can control
the partial refresh of an component. 


[[[language=smalltalk
WAComponent subclass: #ReefCounter
    instanceVariableNames: 'count'
    classVariableNames: ''
    category: 'ReefSandbox'
]]]

Then we define an ==initialize== method

[[[language=smalltalk
ReefCounter >> initialize 
    super initialize.
    count := 0
]]]

!!! A first version with a little problem

We will create a panel to which we add a view on the counter, and two anchors. 




Blocks are the way we link client and server behavior.
Each anchor gets a label and a callback. Unless specified differently, the callbacks are executed as 
Ajax callbacks (no new page is rendered but there is a request to the server). 

SDL: why we do not use initializeContents?


[[[language=smalltalk
ReefCounter >> renderContentOn: html
    | panel |
    "This has one problem: it refreshes all (including anchors)"
    panel := REPanel new.
    panel class: 'counter';
        add: [ REText with: count ];
        add: (REAnchor new 
            label: '+';
            callback: [ 
                count := count + 1. 
                panel refresh ];
            yourself);
        add: (REAnchor new 
            label: '-';
            callback: [ 
                count := count - 1. 
                panel refresh ];
            yourself).
    html render: panel	
]]]

Note that we use a block ==[ REText with: count ]== so that when the panel is refreshed the current value of the counter is used and not the value when the component structure was created. SDML: but the structure is generated at rendering time so I do not see really precisely the diff.


Then we register the application using a registration process dedicated for Reef. 

[[[language=smalltalk
ReefCounter class >> initialize
    "self initialize"
    REApplication
        registerAsApplication: 'reefCounter'
        root: ReefCounter
]]]

Now you should get the following in your web-browser

+A Seaside Counter based on Reef>file://figures/ReefCounter.png|width=50|label=review+ 





!!!!About asReefView. 
==asReefView== is a shortcut to create the corresponding default view component. For a number we just convert into the corresponding text view, a ==REText== (as you can see browsing implementors of ==asReefView==). 

[[[language=smalltalk
Object >> asReefView
    "Answer a view of my self"
    ^ REText with: self
]]]

So the previous definition is equals to the following one:

[[[language=smalltalk
ReefCounter >> renderContentOn: html
    | panel |
    "This has one problem: it refreshes all (including anchors)"
    panel := REPanel new.
    panel class: 'counter';
        add: [ count asReefView ];
        add: (REAnchor new 
               label: '+';
               callback: [ 
                   count := count + 1. 
                   panel refresh  ];
            yourself);
        add: (REAnchor new 
            label: '-';
            callback: [ 
                count := count - 1. 
                panel refresh ];
            yourself).
    html render: panel	
]]]

SDLM HOw could I see that there are refreshed too much.
Putting a self inform: 'jlkljk'

[[[
	renderContentOn: html
	    | panel |
	  "This has one problem: it refreshes all (including anchors)"
		panel := REPanel new.
	    panel class: 'counter';
			add: [ count asReefView ];
			add: (REAnchor new 
	               label: '+';
	               callback: [ 
	                   count := count + 1. 
							self inform: 'in +'.
	                   panel refresh  ];
	            yourself);
	        add: (REAnchor new 
	            label: '-';
	            callback: [ 
	                count := count - 1. 
						self inform: 'in -'.
	                panel refresh ];
	            yourself).
		 html render: panel	
]]]

SDLM: I do not get a inform on a separate page
When I press + I only see + and not + and - so I do not get your refresh too much story.


!!! A second version with controlled refresh

In the previous definition, the anchors were unnecessary refreshed. Indeed a panel is the unit of refresh in HTML: the complete panel containing all the three elements was refreshed. So we should use a different container for the anchors and heading. 

Old text: 

In the previous definition, the anchors were unnecessary refreshed. Indeed the complete panel containing all the three elements was refreshed. SDLM why? A panel is the unit of refresh in HTML so we enclose what we want to refresh via ajax. SDLM: I do not get the enclose

Here we use a container, i.e. a component refreshing only its children and not itself. Then the anchor callbacks will refresh the panel containing the value but not the complete

[[[language=smalltalk
ReefCounter >> renderContentOn: html
    | panel |    
    panel := REPanel with: [ count asReefView ].
    html render: (REContainer new 
        class: 'counter';
        add: panel ;
        add: (REAnchor new 
            label: '+';
            callback: [ 
                count := count + 1. 
                panel refresh  ];
            yourself);
        add: (REAnchor new 
            label: '-';
            callback: [ 
                count := count - 1. 
                panel refresh ];
            yourself);
        yourself)
]]]

Now to get a better look we can use the Reef library as follows: 

[[[language=smalltalk
ReefCounter class >> initialize 
    "self initialize"
    (REApplication 
        registerAsApplication: 'reefCounter' 
        root: self) addLibrary: REBootstrapLibrary
]]]


!!! Refining the heading

[[[language=smalltalk
ReefCounter >> renderContentOn: html

    | panel |    
    panel := REPanel with: [ REHeading with: count ].
    html render: (REContainer new 
        add: panel;
        add: (REAnchor new 
            class: 'btn';
            label: '+';
            callback: [ 
                count := count + 1. 
                panel refresh  ];
            yourself);
        add: (REAnchor new 
            class: 'btn';
            label: '-';
            callback: [ 
                count := count - 1. 
                panel refresh ];
            yourself);
        yourself)
]]]


+A better Seaside Counter based on Reef>file://figures/moreBeautifulReefCounter|width=50|label=betterreview+ 


So far the counter example does not really show the power of Reef in action.



!! Creating a Search Component
We will create a Reef component and embed it inside a Seaside one. In this section, we are going to create a dynamic search of classes and show basic AJAX interaction.


!!!A Simple Reef Component Form

To create a form in Reef, you need to subclass from class ==REForm==. ==REForm== is the class responsible for creating forms in Reef. 


[[[
REForm subclass: #RTSearch
	instanceVariableNames: ''
	classVariableNames: ''
	category: 'ReefSandbox'
]]]

  ==REForm== is a subclass of ==REContainer== which is the root of the components that can have children. Other reef container components are ==REPanel==, ==REGrid==, and ==REList==. Of course such components can be further specialised: hence ==REPanel== is the superclass of ==REDialog==, ==REAccordion==, ==RECarousel==, and ==RETabs==. All these components can then contain other components as shown in Figure *@hierarchy*. 

+The ==REView== hierarchy: ==REContainer== is the root of the component container components.>file://figures/REViewHierarchy|width=50|label=hierarchy+ 


Now let us go back to our ==RTSearch== class. You need to override the method ==initializeContents== to add children components to your container widget. It plays similar role than ==childen== in plain Seaside. We use the message ==add:== to add subcomponents. 

[[[
RTSearch>>initializeContents
	self add: 'Search :'.
	self add: RETextField new.
]]]

SDLM: why a string? 

And this is it for our first component. 

!!! A Host Seaside Component
Now to see the component in action we define a simple traditional Seaside component.

[[[smalltalk=language
WAComponent subclass: #RTWebApplication
	instanceVariableNames: 'searchComponent'
	classVariableNames: ''
	category: 'ReefSandbox'
]]]

Now we initialize the Seaside component and we make sure that the Reef component is turned into 
a Seaside one by sending it in addition the message ==asComponent==.

[[[smalltalk=language
RTWebApplication >> initialize
	super initialize.
	searchComponent := RTSearch new asComponent.
]]]

Since the reef component will be a children of the application, we should return it as part of the children protocol of the Seaside component.

[[[smalltalk=language
RTWebApplication >> children
	^ Array with: searchComponent
]]]

Finally we just render the part and do nothing special. 

[[[smalltalk=language
RTWebApplication >> renderContentOn: html
	html render: searchComponent
]]]

As you may have noticed, the search component is not just holding an instance of ==RTSearch==. Indeed we send the ==asComponent== to this instance before assigning it to the instance variable. And indeed a part of the magic here is this ==asComponent== message send. This message says to any Reef component to be wrapped into a Seaside component. This component can now be added to your Seaside application as any other component.

!!!Registering

As with any Seaside application we should register it but we register as a Reef application not a plain Seaside one. Here we use the ==REApplication== and not ==WAAdmin== SDLM: check if this is correct.  Execute in a workspace or define as class ==initialize== method the following expression and execute it. 

[[[smalltalk=language
RTWebApplication class >> initialize
	"self initialize"
	
	REApplication 
		registerAsApplication: 'reefSandbox'
		root: RTWebApplication
]]]


You may wonder why we should register our application as a Reef application and not as a simple Seaside application. This is because Reef supports client side updates and other cool features that we will present later. 
In addition, a Reef application needs to be configured with some elements: 

# we need some jQuery libraries 
# We need a div tag always present in our browser (a ''dispatcher area'' to process AJAX requests) ==REApplication class>>registerAsApplication:root:== does that for you, but you could do this by yourself and use the common application registering mechanism.



!!!First version

So, executing your application in *http://localhost:8080/sandbox*, we get the result shown in Figure *@v1*:

+A simple component (version 1).>file://figures/SearchPartV1|width=50|label=v1+ 

Ok, no so great at the moment, but we are going to add more functionalities.
Right now, our Reef component doesn't do anything (just render a form with a text field), but this is 
just the first step, now we are going to add behavior to our text field widget.

+A simple component (version 2).>file://figures/SearchPartV2|width=50|label=v2+ 


We will do something a bit crazy, each time a key is pressed in the text field we will show it to the user using an alert. 


[[[language=smalltalk
RTSearch >> initializeContents
	self add: 'Search :'.
	self add: (RETextField new
		onKeyPress: [ :me | me triggerThenDo: [ self inform: text ] ];
		callback: [ :v | text := v ];
		yourself)
]]]

Please not that we add a text instance variable to hold  IDO NOT KNOW WHAT FOR NOW
\sd{what is text? a new instance variable in SearchPart}


- We used a ==callback:== Reef message. The ==callback:== message looks like a standard Seaside brush and in fact is the same. It is executed at the end to store the value entered in the text field. SDLM: is it executed at the end?

- We used the ==onKeyPress:== message. This is different from Seaside. In plain Seaside,
you need to send a Javascript string to this kind of messages (tag events). 
In Reef, that's not what you do. Instead, you use a block of code. 
In this case, the ==onKeyPress:== block is getting the text field as a parameter (it is optional), and we  trigger this widget and then execute another action.
SDLM: what does it mean to trigger the widget exactly. 

Let's test it! When you enter a character you should get the inform as shown in Figure *v2*.

!!!Adding a feedback panel

Now we want to add a panel to show the classes whose name matches the input. 
For this we are going to modify our ==RESearch== class again. We add a new instance 
variable named ==resultsPanel== that will display all the matching results.
It will contain a panel containing a list of panels.

[[[
REForm subclass: #RTSearch
	instanceVariableNames: 'text resultsPanel'
	classVariableNames: ''
	category: 'ReefSandbox'
]]]


What changes will we introduce?
- We add a panel instance variable (==resultsPanel==) 
- Then, we modified ==onKeyPress:== to call ==search== instead of showing a dialog. 

We create a ==REPanel== and we add it as a subcomponent of the ==RTSearch== componnent. 
Note that we change the action that is executed at each keyStroke: now we invoke the search method. 

[[[language=smalltalk
RESearch >> initializeContents
	resultsPanel := REPanel new.
	self add: 'Search'.
	self add: (RETextField new
		onKeyPress: [:me | me triggerThenDo: [self search] ];
		callback: [:v | text := v]).
	self add: resultsPanel
]]]

The ==search== method does a refresh of the panel by doing:
-- remove all children (if any) 
-- add all class names with a name starting with ''text'', as a new panel (we need a panel because we want a name per line...) 
-- send a ==refresh== message, which actually performs the refresh of the panel content. 

[[[language=smalltalk
RESearch >> search
	resultsPanel removeAll.
	text ifNotEmpty: [ 
		resultsPanel
			addAll: (Smalltalk globals classNames
						select: [ :each | each beginsWith: text ]
						thenCollect: [ :each | REPanel new add: each ; yourself ]);
			refresh ]
]]]


Once you refreshed your application, you should see Figure *@v3*.

+With the matching list of classes as feedback (version 3).>file://figures/SearchPartV3|width=50|label=v3+ 


All the refreshing behavior is done in the client. 


So we are done with your first Reef component. What you should notice is that we did not talk about JavaScript since it is encapsulated in Reef components. 

SDLM: why the delete button does not work. 

[[[language=smalltalk
RESearch >> initializeContents
	resultsPanel := REPanel new.
	self add: 'Search'.
	self add: (RETextField new
		onKeyPress: [:me | me triggerThenDo: [self search] ];
		callback: [:v | text := v]).
	self add: resultsPanel.
	self add: (REAnchor new 
					label: 'Press me client!';
					callback: [ self inform: 'Pressed!' ] ;
					yourself)	
]]]					
					
is equivalent to 

[[[
	...
	self add: (REAnchor new 
					label: 'Press me client!';
					callback: [ self inform: 'Pressed!' ] asReefClientCallback ;
					yourself)	
]]]					
						
!!Dealing with Callbacks
One of the strengths of Reef is that we can control the interaction between the client and the server. With Reef the programmer can decide that a request should be resolved on the client without a complete page generation or on the contrary to generate a full new page. Now we will look into this with a bit more depth and explanation. 

!!!Client-Server interaction in Reef

One of the most important features in Seaside is its natural flow, achieved through the use of closures under the forms of callbacks. One of the problems when using a client-side library, such as ==jQuery== or any JavaScript library, is the loss of this natural feeling and simplicity.

In Reef, we try to keep this natural flow, as much as we can, by hiding most of the JavaScript complexity, and using closures also for JavaScript behavior.  For that, we have redefined the event behavior to match a little more with what a Seaside programmer can expect. Let us see the different kind of interactions.


!!!Three different kind of interactions

There are three kinds of possible interactions between a page in a client and the Seaside server:

- The client application needs to call server with some functionality, and then it renders a complete new page. This is the ''normal behavior'' of a web application, and in Reef we support it as a way to ''get back'' to normal flow, while inside a Reef flow.

- The client application needs to access the server to do something, and then update the status of the page, but without rendering a new page because it can be too costly. This kind of interaction is the hardest to manage, and the most commonly used, this is the default Reef behavior.

- The page needs to change the DOM (for instance, to hover current selected row), without going to server at all. This is, for us, the most difficult to solve, because the DOM manipulation needs to be a JavaScript sentence.


These three different interactions are defining the ways an application can interact with the user, creating different results, but just one final feeling: we are in a ''desktop'' application.
We are going to explain how Reef manages these three approaches.

!!!Updating the server, then update the client

As we said before, we think this is the most common behavior you can find in a web-application, and for that reason we are focusing in this mode. Let us see how it works.
Well, let's suppose you have a validation in a text field that needs to be validated on blur event (once you lost focus), you have something like this:

[[[language=smalltalk
	...
	self add: (RETextField new
				onBlur: [ :me | me triggerThenDo: 
							[ self validate ifFalse: [ self error: 'Error validating' ] ] ]; 
				on: #value of: self)
	...
]]]

As you can see, the flow is more or less like it would be in any usual desktop application, with just one  difference: you need to tell the client that you are going to use the value just typed in this field, SDLM: where? and just then we can go for real interact with the client side value. Using this kind of callback is the default behavior in any Reef component, with the unique exception of the argument of ==callback:== in form elements (those who will become in a FORM element in HTML, like an INPUT, TEXTAREA, etc.).

SDLM: Chinese? totally unclear to me


!!!Update the server, then render a new page

This functionality is useful after pressing a button, or after doing some operations that we decide needs a new page. What it does is to skip the client/server AJAX interaction and render a full new page: it works just like a common anchor or button pressed in plain HTML. To tell Reef that the result of a callback should be executed in another page, we use the message ==asReefPageCallback== sent to a callback. See next example:

[[[language=smalltalk
	... 
	add: (REButton new
			label: 'Login'; 
			callback: [ self login ] asReefPageCallback)
	...
]]]

In this case, pressing the button acts just like pressing a regular button in Seaside.


!!!Not updating the server, just the client

This third case is useful to perform client side validations, or highlighting something on hover. This callback executes its contents at render time, and prepare the page with the resulting JavaScript, so it can act on client side. To tell Reef that it should execute the callback on client side, we use the message ==asReefClientCallback==. See the example:

[[[language=smalltalk
	... 
	self add: (REPanel new
		class: 'panel'; 
		onMouseMove: [ :me | me asClient addClass: 'hover' ] asReefClientCallback; 
		onMouseOut: [ :me | me asClient removeClass: 'hover' ] asReefClientCallback; 
		add: 'Panel with hover'; yourself).
	...
]]]

As you can see, we introduced the protocol ==asReefClientCallback==, which answers a representation in JavaScript, and you can then send messages of the jQuery package.

SDLM where is the code of this application. 


!!!Hybrids

There is still one scenario to deal with: The one in which we want to do something and in some cases the opposite. For example, if we want to validate some inputs and on success render a new page, but on failure stay in the current page, and show a message. 

To allow us execute different client/server interactions inside a flow, there are the message: ==inPage:==, ==inClient:==, both allow us to perform different actions to change the rendering logic. 

SDLM: \sd{why inPage: and not inServer: (onServer: and onClient: would be better)}

See the example:



[[[language=smalltalk
	... 
	self add: (REButton new
			label: 'Login'; 
			callback: [
				self triggerThenDo: [ self login
							ifTrue: [ self inPage: [ self show: aComponent ] ] 
							ifFalse: [ self inClient: [ self asClient addClass: 'error' ] ] ] ].
]]]							


In this case, a new page (with aComponent contents) will be rendered if the login is successful, and an error class will be added to form if it doesn't.

!!!API

Here is the list of messages proposed by Reef to manage client/server interactions.

- ==[ ... ]== A block in Reef is a callback which leads to an interaction between client and server, without render a new page. Exception: callbacks on form elements.

- ==[ ... ] asReefPageCallback== The contents of the block is executed, but all rendering it happening in a new page. SDLM: does force a rendering and redraw the current page?

- ==[ ... ] asReefClientCallback== The contents of the block is executed in rendering phase, and the result must be a JQuery Stream or a String.

- ==[ :me | ... ]== All blocks can receive the owner as an argument (but it is not mandatory).

- ==triggerThenDo:==  Triggers the form element (When applied to a form, it triggers full form).

- ==asClient==	Returns the jQuery object representation of the Reef component.

- ==inPage:==  Renders the block contents in a new page.

- ==inClient:== 	Renders the block, in same page as we are now. It works just like ==asReefClientCallback==.

!!Interaction in Action

Now we will show you a simple application showing in practice the different interactions. 
Let us define a simple Todo application. 

!!! The domain: A todo

The domain is simple and with limited interest. Here is a possible definition. 

[[[language=smalltalk
Object subclass: #WDTodo
	instanceVariableNames: 'done description creationDate doneDate'
	classVariableNames: ''
	category: 'ReefTodo'
]]]

[[[language=smalltalk
WDTodo >> creationDate
	^ creationDate
]]]
[[[language=smalltalk
WDTodo >> description
	^ description
]]]
	
[[[language=smalltalk
WDTodo >> description: anObject
	description := anObject
]]]

[[[language=smalltalk	
WDTodo >> done
	^ done
]]]

[[[language=smalltalk
WDTodo >> toggleStatus 
	done := done not
]]]

[[[language=smalltalk
WDTodo >> printOn: stream 
	stream nextPutAll: (self description ifNil: [ '' ])
]]]
	
[[[language=smalltalk	
WDTodo >> initialize 
	super initialize.
	self done: false.
	creationDate := DateAndTime now
]]]

[[[language=smalltalk	
WDTodo >> done: aBoolean
	done := aBoolean.
	doneDate := (aBoolean 
		ifTrue: [ DateAndTime now ]
		ifFalse: [ nil ])	
]]]

[[[language=smalltalk
WDTodo >> isDone 
	^ done
]]]


!!! Handling created todos
	
Now we just add a cheap and dirty way to keep some todos. We add an instance variable to the class to hold a collection of todos that we will add each time they are created. This is clearly the place 
where we can plug Voyage to store the objects in a mongo or other databases.

[[[language=smalltalk
WDTodo class
	instanceVariableNames: 'todos'
]]]

[[[language=smalltalk
WDTodo class >> reset
	"self initialize"
	todos := OrderedCollection new. 
]]]	

[[[language=smalltalk
WDTodo class >> new
	"WDTodo new description:' yeah'"
	^ todos add: super new 
]]]

[[[language=smalltalk
WDTodo class >> initialize
	"self initialize"	
	self reset
]]]

Do not forget to execute ==WDTodo initialize==

!!!! Introducing some simple queries
We use the same API than Voyage to introduce some simple queries to be able to create a more fancy interaction and user experience. 

[[[language=smalltalk
WDTodo class >> selectMany: aBlock
	^ todos select: aBlock
]]]

[[[language=smalltalk
WDTodo class >> findDone
	^ self selectMany: [ :each | each isDone ]
]]]

[[[language=smalltalk
WDTodo class >> countNotDone
	^ (self selectMany: [ :each | each isDone not ]) size
]]]

[[[language=smalltalk
WDTodo class >> countDone
	^ self findDone size
]]]


	

!! The view part: Setting the stage 

We will define first the entry point of the application and display a single todo. 

We first define a container to display one single todo item.
We use a REContainer so that we can control the refresh of its part in a better way than using a simple panel. 

[[[language=smalltalk
REContainer subclass: #WDTodoPanel
	instanceVariableNames: 'todo label'
	classVariableNames: ''
	category: 'TodoMVC-Seaside-View'
]]]

[[[language=smalltalk
WDTodoPanel >> todo: aTodo
	^ self basicNew 
		initializeTodo: aTodo;
		yourself
]]]
	
[[[language=smalltalk
WDTodoPanel >> initializeTodo: aTodo 
	todo := aTodo. 
	self initialize
]]]
	
!!!! The entry point: Todo Application

We create a Seaside component named ==WDTodoApplication== that will be the entry point of the application 

[[[language=smalltalk
WAComponent subclass: #WDTodoApplication
	instanceVariableNames: 'newTodoTextField'
	classVariableNames: ''
	category: 'TodoMVC-Seaside-View'
]]]
	
We add a simple method to encapsulate Todo creation. In the future we may place there notifications or refresh 

[[[language=smalltalk
WDTodoApplication >> addNewTodo: aString
	WDTodo new description: aString
]]]

Then we introduce the creation of an input text field.
	
[[[language=smalltalk
WDTodoApplication >> newTodoTextField
	^ newTodoTextField ifNil: [ newTodoTextField := self createNewTodoTextInputField ]	
]]]

	
[[[language=smalltalk
WDTodoApplication >> createNewTodoTextInputField
		| input value |
		input := RETextField new.
		input 
			id: 'new-todo';
			placeHolder: 'What needs to be done?';
			callback: [ :v | value := v ];
			onEnter: ([ :me | 
				me inClient: [ me asClient value: '' ].
				self addNewTodo: value ] asReefTriggerThisCallback).
		^ input		
]]]
	
SDLM: why 
me inClient: [ me asClient value: '' ].
controls the accept behavior?
	
[[[language=smalltalk
WDTodoApplication >> renderHeaderOn: html
	html render: 'todos' asReefHeading.
	html render: self newTodoTextField 
]]]

[[[language=smalltalk
WDTodoApplication >> renderContentOn: html
	html section
		id: 'todoapp';
		with: [ 
			html header id: 'header'; with: [ self renderHeaderOn: html ].
			].
]]]
SDLM: explain the header and id: stuff briefly


SDLM why 
[[[
children
	^ { self listComponent }
	does not contain newTodoPanel = newTodoTextField
]]]



	
!!! 	
	
[[[	
createNewTodoTextInputField
	| input value |
	input := RETextField new.
	input 
		id: 'new-todo';
		placeHolder: 'What needs to be done?';
		callback: [ :v | value := v ];
		onEnter: ([ :me | 
			me inClient: [ me asClient value: '' ].
			self addNewTodo: value ] asReefTriggerThisCallback).
	^ input	
]]]	

SDLM why me inClient: [ me asClient value: '' ].
	
	
[[[
updateRoot: anHtmlRoot
	super updateRoot: anHtmlRoot.

	anHtmlRoot stylesheet url: REBootstrapLibrary / #bootstrapminCss.
	anHtmlRoot javascript url: REBootstrapLibrary / #bootstrapminJs.

	anHtmlRoot stylesheet url: WDStaticLibrary / #resetCss.
	anHtmlRoot stylesheet url: WDStaticLibrary / #baseCss.
	anHtmlRoot stylesheet url: WDStaticLibrary / #appCss.	
]]]	
	
	
!! Conclusion
Reef is mega cool. 


!! Why

why when I press Press me I get a session expired and a redirec to the same place?

[[[
initializeContents
	resultsPanel := REPanel new.
	self add: 'Search'.
	self add: (RETextField new
		onKeyPress: [:me | me triggerThenDo: [self search] ];
		callback: [:v | text := v]).
	self add: resultsPanel.
	
	self add: (REAnchor new 
					label: 'Press me!';
					callback: [ self inform: 'Pressed!' ] asReefPageCallback ;
					yourself)
]]]