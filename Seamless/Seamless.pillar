{ "title": "Seamless: Transparent network of objects" }

Seamless implemented Basys network to organize transparent communication between distributed objects.

SeamlessNetwork instance should be created on client and server.
[[[
network := SeamlessNetwork new.
]]]
To accept connections network should start server:
[[[
network startServerOn: 40422. "it is part of Basys network API"
]]]

Client can connect to server and retrieve remote environment:
[[[
remoteSmalltalk := network environmentAt: (TCPAddress ip: #[127 0 0 1] port: 40422). "short version: TCPAddress localAt: 40422"
]]]
Returned result is proxy which delegates any received message to remote object. Remote messages are executed on server which return result back to client. Result can be returned as another proxy or as copy which contain another proxies.

In example result is reference to remote Smalltalk instance. It can access globals from remote environment:
[[[
remoteTranscript := remoteSmalltalk at: #Transcript.
remoteTranscript open; show: 'remote message'; cr
]]]
It will open transcript on server and print text on it.

Arguments of remote message are transferred to server with same logic as message result transferred to client. On server arguments can include proxies and server can send messages to them:
[[[
remoteTranscript print: #(1 2 3 4 5)
]]]
Here array will be passed to server as reference. Then on server transcript will interact with it to print it. And as result client will receive messages from server.

!!Transfer strategies
By default objects transferred by reference. But some objects like numbers and strings are transferred by value. Classes can override this behaviour by implementing #seamlessDefaultTransferStrategy.

For example Object returns SeamlessTransferByReferenceStrategy. But numbers and strings return SeamlessTransferByValueStrategy.

[[[
Object>>seamlessDefaultTransferStrategy
  ^SeamlessTransferStrategy defaultByReference

Number>>seamlessDefaultTransferStrategy
  ^SeamlessTransferStrategy defaultByValue

MessageSend>>seamlessDefaultTransferStrategy
  ^SeamlessTransferStrategy defaultForMessageSend
]]]

Default strategies are defined as singletons to reduce garbage during transfer.

Default strategies can be overridden on network level. Strategy can be explicitly added to network for specific set of objects.
[[[
network addTransferStrategy: (SeamlessTransferByReferenceStrategy for: (Instance of: Point).
]]]
Set of objects are defined by criteria which understands #matches: message. In this example StateSpecs is used.

!!!Transfer by reference
For objects which are transferred by reference network creates SeamlessObjectReference and transmits it over network instead of real object. On server side network creates proxies for received references.

By default proxy is SeamlessProxy which delegates all messages to remote side. But it is possible to use specific proxy representation for distributed objects.

New kind of reference should be created by subclassing SeamlessObjectReference. It should override #createProxy method to return required proxy representation.

Then required classes can return new kind of reference from method #createSeamlessReference.

For example look at existed implementations:
[[[
Object>>createSeamlessReference
	^SeamlessObjectReference new

SeamlessObjectReference>>createProxy
	^SeamlessProxy for: self

SeamessSyncRequestContext>>createSeamlessReference
    ^SeamlessRequestContextReference new

SeamlessRequestContextReference>> createProxy
    ^SeamlessRemoteContext new
]]]
!!!Transfer by value
This strategy is transfered object as copy. It is not specified what should happens with it instance variables.

For example Rectangle can be transferred by value with two different ways:
[[[
originReference corner: cornerReference
]]]
In this case for both corners Seamless chooses transfer by reference.

But it can be:
[[[
10@20 corner: cornerReference
]]]
Which means that for origin point Seamless chooses transfer by value strategy but for corner it chooses transfer by reference

!!SeamlessObjectTransporter
Seamless delegates object sending and receiving to SeamlessObjectTransporter. It is abstract class which implements general behaviour to prepare sent and received objects. Subclasses use prepared information to correctly implement concrete transfer protocol:
[[[
transporter transferObject: anObject by: aSocket
transporter receiveObjectBy: aSocket
]]]
Currently Fuel protocol is implemented by SeamlessFuelObjectTransporter.

!!!Transfer objects
Before sending object transporter scans full object graph and collects nodes which should be transferred by reference and by value
[[[
SeamlessObjectTransporter>>prepareObjectForTransfer
	| strategy |
	objectsByReference := IdentityDictionary new.
	objectsByValue := IdentitySet new.
	traveler := ObjectTraveler on: object.

	traveler referencesDo: [:eachNode |
        (objectsByValue includes: eachNode) ifFalse: [
	        strategy := network transferStrategyFor: eachNode.
	        strategy prepareTransferOf: eachNode by: self]]
]]]
It asks transfer strategy for each node. And strategy commands what to do with it:
[[[
TransferByReferenceStrategy>>prepareTransferOf: anObject by: transporter
	transporter transferByReference: anObject

TransferByValueStrategy>>prepareTransferOf: anObject by: transporter
	“By default transporter transfer given object by value.
	So we don't need to do anything here”

MessageSendTransferStrategy>>prepareTransferOf: aMessageSend by: transporter
	“By default arrays are transferred by reference.
	But array with message arguments must be transferred by value.
        Instead message can’t be executed on remote side”
	transporter transferByValue: aMessageSend arguments
]]]
At the end concrete transporter uses collected information to substitute required objects by references.
[[[
SeamlessFuelObjectTransporter>>transferObjectBy: aSocket
	| stream serializer reference |
	stream := network transferWriteStreamOn: aSocket.

	serializer := FLSerializer newDefault.
	serializer analyzer
        when: [ :o | (reference := objectsByReference at: o ifAbsent: [ nil ]) notNil ]
        substituteBy: [ :o | reference ].
   serializer serialize: object on: stream.
	stream flush
]]]
!!!Receiving objects

Concrete transporters implements reading objects from network.
[[[
FuelObjectTransporter>>receiveObjectBy: aSocket
	| stream |
	stream := network transferReadStreamOn: aSocket.
	[
		object := (FLMaterializer newDefault materializeFrom: stream) root.
	] on: FLError do: [ :err | BasysWrongProtocolError signalAs: err ]
]]]
Transporter can detect wrong data format and signal failure. Basys will catch it and close “alien” connection.

When object is received transporter prepare it for external usage. It scans full object graph to replace all seamless references by local objects or proxies
[[[
SeamlessObjectTransporter>>prepareReceivedObjectWhichWasFrom: aRemotePeer
	traveler := ObjectTraveler on: object.
	traveler skip: aRemotePeer.

	traveler referencesDo: [:each | | existedObject |
		each isSeamlessReference ifTrue: [
			each peer: aRemotePeer.
			existedObject := network objectFor: each.
			traveler replaceCurrentReferenceWith: existedObject.
			traveler skip: existedObject ]].
	^object
]]]
!!Managing distributed objects
SeamlessDistributedObjects is implemented to organize thread safe access for distributed objects.

It implements mapping between objects and their references.

Reference is represented by SeamlessObjectReference subclasses. It contain id, peerId and peer instance variables.

Pair “id and peerId” is globally unique and used as identity property.
Peer instance variable contains sender of reference.

SeamlessDistributedObjects provides access to object by reference and it can find reference for object. SeamlessNetwork implements convenient methods for this:

[[[
SeamlessNetwork>>objectFor: aSeamlessReference
	^distributedObjects at: aSeamlessObjectReference
]]]

It creates proxy if no local object exists for given reference.

[[[
SeamlessNetwork>>referenceFor: anObject
	^distributedObjects referenceFor: anObject receivedFrom: localPeer
]]]

It creates reference for new distributed object. Created reference will contain local peer as sender peer.

Now no garbage collection implemented for distributed objects

!!Seamless requests

Seamless peers communicate with each others by sending request objects.
[[[
peer sendDataPacket: (SeamlessMessageSendRequest with: aMessageSend)
]]]
It is subclasses of SeamlessRequest. Remote message send is just one type of it:

+file://figures/SeamlessRequests.jpg+

Sending request to peer not waits any result. It just sends serialized data by free connection.

To perform synchronous request it should be sent by special context object:
[[[
context := peer createSyncRequestContext.
returnedValue := context sendRequest: (SeamlessMessageSendRequest with: aMessageSend)
]]]
Context represents logical request sender. Request holds it in context variable and together they are transferred over network.

Here is SeamlessSyncRequestContext. It forks request sending and waits result.

Requests should implement method #executeFor: which are called on receiver peer as part of network data processing.

During execution requests can return result to sender.

Request result is represented by SeamlessRequestResult subclases:
-SeamlessReturnValueResult
-SeamlessThrowExceptionResult

Requests should return result by context:

[[[
SeamlessMessageSendRequest>>executeFor: senderPeer
	| messageResult requestResult |
	[
		messageResult := messageSend value.
		requestResult := messageResult asSeamlessRequestResult.
	] on: Exception - Halt - Notification do: [ :err | requestResult := err asSeamlessRequestResult ].

	context return: requestResult to: senderPeer

SeamlessPeerIdentificationRequest>>executeFor: senderPeer
	| identifiedPeer |
	identifiedPeer := senderPeer beIdentifiedAs: peerId.

	context returnValue: senderPeer localPeerId to: identifiedPeer

SeamlessGetEnvironmentRequest>>executeFor: senderPeer

	context returnValue: Smalltalk to: senderPeer
]]]

There are few types of contexts. They all implement method #return:to: to send result to sender.

+file://figures/SeamlessContexts.jpg+

Request sending contexts are used to send requests to receiver peer and somehow return result from it. They are subclasses of SeamlessRequestSendingContext.

They should implement #sendRequest: method and simple version of #return: without senderPeer argument.

For example look at sync context:
[[[
SeamlessSyncRequestContext>>sendRequest: aSeamlessRequest
	aSeamlessRequest context: self.
	self forkProcessingOf: aSeamlessRequest.
	resultWaiter wait.
	^result returnValue

SeamlessSyncRequestContext>>return: aRequestResult
    result := aRequestResult
		resultWaiter signal
]]]

When request is executed on receiver peer sender peer should receive result and somehow call #return: method of waiting sync context.

To implement it special trick is used.

Sync context is always transferred by reference and on receiver peer it is represented by special proxy SeamlessRemoteContext. As proxy it can delegate messages to real remote object which is sync context in that case. So to implement return SeamlessRemoteContext just sends remote message #return: to itself:
[[[
RemoteRequestContext>>return: result to: senderPeer
	| messageSend |
	messageSend := MessageSend receiver: self selector: #return: argument: result.

	senderPeer sendDataPacket: (SeamlessMessageSendRequest with: messageSend)
]]]
Return request is sent directly to sender peer which means that on sender side it will have default context.
Any requests has default context (SeamlessDefaultRequestContext) which skipes any returned result.

So on sender peer "return request" will be executed but it result will be ignored.
Or in other words "return request" will pass result to sender peer without any following interaction with receiver peer.

!!Future work

!!!Garbage collection
There is no garbage collection of distributed objects yet. There are three cases:
-cleaning unused proxies
-cleaning unused real objects (distributed objects)
-cleaning unused peers

!!!!Cleaning unused proxies

+file://figures/SeamlessTwoPeersSharedReference.jpg+

First case can be implemented by extracting all proxies to separate weak collection inside SeamlessDistributedObjects structure. Currently this container use two dictionaries: referencesToObject and objectsToReferences, which used to manage proxies and real objects equivalently.

+file://figures/SeamlessTwoPeersSharedReferenceByWeakArray.jpg+

Container can hold integers for proxies which will point to index inside separated weak array. This will allow garbage collector remove unused proxies. And by this Seamless can cleanup unused references.
It works fine for two peers. But when reference is shared between multiple peers such approach has problems

+file://figures/SeamlessThreePeersSharedReference.jpg+

But lets look at example of network with three peers A, B, C.

Peer A transfer reference Ra to peer B. On peer B reference will be presented by proxy A which will delegates all messages to peer A.

Then peer B transfers this reference to peer C. On peer C reference will be presented by proxy B which will delegates all messages to peer B which will resent it to peer A.

Now imaging that reference Ra not used anymore on peer B. And peer B removed it from own distributed objects.

+file://figures/SeamlessThreePeersSharedReferenceAndSecondRemoveIt.jpg+

What will happen if peer C will send messages to proxy B?

+file://figures/SeamlessThreePeersSharedReferenceAndSecondRemoveItAndThrirdSendMessageToIt.jpg+

Proxy B will resend message to peer B. But peer B not anymore has reference Ra. So peer B will create proxy C for it which will point to peer C. And proxy C will resent message back to peer C. Which will lead to infinite recursion.

Possible solution to this problem is to forbid remote indirect messages. Seamless can always try to find owner peer of reference on current network. And if it not found error can be signalled. Otherwise Seamless can send message directly to owner peer instead of indirect transfer through sender peer.

Such restriction can be more stronger. Seamless can forbid transfer of references o peers which not know owner peers. In that case sending objects which just contains references can be failed. No matter if this references will never receive messages on this peers.

With that approach concrete application will be responsible to ensure that peers know each others.
In the case of two peers network this restrictions make no sense. And also classic client server application should not suffer by this. Usually client data not becomes shared between other clients.

By the way guarantee of direct messages will provide better performance for distributed applications.

!!!!Cleaning unused distributed objects
When object are going to be transfered over network it become distributed. Special reference object created for him to represent it inside network. Seamless can't just remove distributed object when it is not anymore used on owner peer. Other peers can have reference to it which allow them to send messages to it.

So secure way to clean unused distributed objects is to ask all known peers about it:
-all local references can be send to knowk peers to detect what is not used
-all known peers can be asked for used references to detect local references which is really not used in network.

But known peers can be unavailable at garbage collection time. What to do in that case?
Different application can put differen requirements for such cases. Some of them can just say: remove unavailable peers and continue garbage collection. Others can say: try again after hour and then remove it.
So it is responsibility of application to put specific strategy on garbage collection of distributed object.

Seamless should implement general requests for garbage collection with hooks which will provide required flexibility.

!!!!Cleaning unused peers

BasysNetwork contains remote peers collection. Now nobody clean it automatically. So any connected client keep in network forever.
Solution is using weak collection for remote peers. It is not problem if server will remove particular remote peer but client will use it in future. Client always can establish new connection and server will recreate peer for it.

Special disconnecting request can be implemented to explicitly remove peers and release all it resources.

!!!Optimizing fuel protocol
Analysis of transferred object graph can be merged with fuel analyses to remove duplicated object traversal
!!!More reusable transfer strategies
It can be useful to get strategies which transfer object by reference with cached information inside (like #pringString value of object)
!!!More Seamless requests
It can be possible to implement special DebugMessageSendRequest which will prepare messageSend on receiver peer for remote debugging by sender
!!!Adapting old Seamless examples
!!!Adapting old Seamless logging
