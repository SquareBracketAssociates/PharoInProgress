! Magritte: Meta-data at Work

Many applications consist of a large number of input dialogs and reports that need to be built, displayed and validated manually. Often these dialogs remain static after the development phase and cannot be changed unless a new development effort occurs. For certain kinds of application domains such as small businesses, changing business plans, modifying workflows, etc., it usually boils down to minor modifications to domain objects and behavior, for example new fields have to be added, configured differently, rearranged or removed. Performing such tasks is tedious.

Magritte is a meta-data description framework. With Magritte you describe your domain objects and among other things you can get Seaside components and their associated validation for free. Moreover Magritte is self-described, enabling the automatic generation of meta-editors which can be adapted for building end-user customizations of application.

In this chapter we describe Magritte, its design and how to customize it. Now be warned, Magritte is a framework supporting meta-data description. As any framework, mastering it takes time. It is not a scaffolding engine, therefore Magritte may imply some extra complexity and you have to understand when you want to pay for such complexity.

!! Basic Principles

In this section we present the key principles. With such knowledge you can get 80\% of the power of Magritte without knowing all its possible customizations. The key idea behind Magritte is the following: given one object with a set of values, and a description of this information, we will create automatically tools that treat such information and for example automatically create Seaside components. 

Figure *basicPrinciple* shows that a person address', John's address, instance of the class Address, is described by a description object which is attached to the class Address. A program (i.e., database query, generic UI, seaside component builder) will interpret the value of the instance by using its descriptions.

+An object is described by a description which is defined on its class.>file://figures/basicPrinciple.png|width=60%|label=basicPrinciple+

Here are the basic description assumptions:

- An object is described by adding methods named ==description== (naming convention) to its class. Such description methods create different description entities. The following ==MAAddress== class method creates a string description object that has a label 'Street', a priority and two accessors street and street: to access it.

[[[
MAAddress>>descriptionStreet
	<magritteDescription>
	^ MAStringDescription new
		accessor: #street;
		label: 'Street';
		priority: 10;
		yourself
]]]

Note that there is no need to have a one to one mapping between the instance variables of the class and the associated descriptions.

- All descriptions are automatically collected and put into a container description when sending ==description== to  the object (see Figure *describingAddress*).
- Descriptions are defined programmatically and can also be queried. They support the collection protocol (==do:==,  ==select:==...).

+Describing an Address.>file://figures/describingAddress.png|width=90%|label=describingAddress+

""Obtaining a component."" Once an object is described, you can obtain a Seaside component by sending to the object the message ==Object>>asComponent==. For example to get a component for an address: ==anAddress asComponent==.

It is often useful to decorate the component with buttons like cancel and Ok. This can be done by sending the message ==WAComponent>>addValidatedForm== to the component. Note that you can also change the label of the validating form using ==addValidatedForm:== and passing an array of associations whose first element is the message to be sent and the second the label to be displayed.

A Magritte form is generally wrapped with a form decoration via  ==WAComponent>>addValidatedForm==. Magritte forms don't directly work on your domain objects. They work on a memento of the values pulled from your object using the descriptions. When you call ==save==, the values are validated using the descriptions, and only after passing all validation rules are the values committed to your domain object by the momentos via the accessors.

[[[
anAddress asComponent addValidatedForm.
]]]

[[[
anAddress asComponent addValidatedForm: { #save -> 'Save'. #cancel -> 'Cancel' }.
]]]

A description container is an object implementing collection behavior (==collect:==, ==select:==, ==do:==, ==allSatisfy:==, ...). Therefore you can send the normal collection messages to extract the parts of the descriptions you want. You can also iterate over the description or concatenate new ones. Have a look at the ==MAContainer== protocol.

You can also use the message ==MAContainer>>asComponentOn:== with aModel to build or select part of a description and get a component on a given model. The following code schematically shows the idea: two descriptions are assembled and a component based on these two descriptions is built.

[[[
((Address descriptionStreet , Address descriptionPlace) 
	asComponentOn: anAddress) addValidatedForm 
]]]

!! First Example

Let us go over a simple but complete example. We want to develop an application to manage person, address and phone number as shown in Figure *addressOur*.

+Our address design.>file://figures/address.png|width=60%|label=addressOur+ 

We define a class ==MAAddress== with four instance variables and their corresponding accessors. 

[[[
Object subclass: #Address
	instanceVariableNames: 'street place plz canton'
	classVariableNames: ''
	category: 'MaAddress'
]]]

[[[
MAAddress class>>example1
	| address | 
	address := self new.
	address plz: 1001.
	address street: 'Sesame'.
	address place: 'DreamTown'.
	address canton: 'Bern'.
	^ address
]]]

Then we add the descriptions to the ==MAAddress== class as follows: the street name and the place are described by a string description, the PLZ is a number with a range between 1000 and 9999, and since the canton is one of the predefined canton list (our address is for Switzerland so far), we describe it as a single option description.

[[[
MAAddress>>descriptionStreet
		<magritteDescription>
		
		^ MAStringDescription new
			accessor: #street;
			label: 'Street';
			priority: 10;
			yourself
]]]

[[[
MAAddress>>descriptionPlz
		<magritteDescription>
		
		^ MANumberDescription new
			accessor: #plz;
			label: 'PLZ';
			priority: 20;
			min: 1000;
			max: 9999;
			yourself
]]]

[[[
MAAddress>>descriptionPlace
		<magritteDescription>
	
		^ MAStringDescription new
				accessor: #place;
				label: 'Place';
				priority: 30;
				yourself
]]]

[[[
MAAddress>>descriptionCanton
		<magritteDescription>
	
		^ MASingleOptionDescription new
			options: #( 'Zurich' 'Bern' 'Luzern' 'Uri' 'Schwyz' 'Unterwalden' 'Glarus' 'Zug' 'Freiburg' 'Solothurn' 'Basel' 'Schaffhausen' 'Appenzell' 'St. Gallen' 'Graubunden' 'Aargau' 'Thurgau' 'Ticino' 'Vaud' 'Valais' 'Neuchatel' 'Geneve' 'Jura' );
			reference: MAStringDescription new;
			accessor: #canton;
			label: 'Canton';
			priority: 40;
			beSorted;
			yourself
]]]
Now we can start manipulating the descriptions. Inspect the description object of the address object:

[[[
| address |
address := Address example1.
address description inspect.
]]]

Now we can iterate over the descriptions and get the values associated with the descriptions of our address model:

[[[
| address |
address := Address example1.
address description do: [ :description |
	Transcript
		show: description label; show: ':'; tab;
		show: (description toString: (address readUsing: description));
		cr ]
]]]
Executing the second code snippet outputs the following in the Transcript:

[[[
Street:    Sesame
PLZ:       1001
Place:     DreamTown
Canton:    Bern
]]]

""Creating a Seaside Editor."" Now we are ready to create a Seaside component automatically in a similar manner. 

[[[
WAComponent subclass: #MyContactAddress
	instanceVariableNames: 'addressForm'
	classVariableNames: ''
	category: 'MaAddress'
]]]

[[[
MyContactAddress>>initialize
	super initialize.
	addressForm := Address example1 asComponent
]]]

[[[
MyContactAddress>>children
	^ Array with: addressForm
]]]

The method ==asComponent== sent to the address object automatically builds a Seaside component for us. The resulting editor is displayed in Figure *addressUI*.

+Address example1 asComponent.>file://figures/addressUI.png|width=90%|label=addressUI+

To enable validation and add buttons to save and cancel the editing process is a matter of adding a decoration. The message ==addValidatedForm== decorates the component with the necessary rendering and behavior.

[[[
MyContactAddress>>initialize
	super initialize.
	addressForm := Address example1 asComponent.
	addressForm addValidatedForm
]]]

As a result we get a complete address editor, as seen in Figure *addressSaveCancel*.

+Same Magritte generated component with buttons and validation.>file://figures/addressSaveCancel.png|width=90%|label=addressSaveCancel+

In summary Magritte is really easy to use with Seaside. You put your descriptions on the class-side according to a naming-convention. You can then ask your model objects for their descriptions by sending the message ==description== or alternatively you directly ask Magritte to build a Seaside editor for you by sending the message ==asComponent==.


!! Descriptions

Descriptions, as we have seen in the above examples, are naturally organized in a description hierarchy. A class diagram of the most important descriptions is shown in Figure *description*. Different kinds of descriptions exist: simple type-descriptions that directly map to Pharo classes, and some more advanced descriptions that are used to represent a collection of descriptions, or to model relationships between different entities.

+Description hierarchy.>file://figures/descriptionhierarchy.png|width=80%|label=description.+

Descriptions are central to Magritte and are connected to accessors and conditions that we present below. 

+Descriptions are a composite and connected via accessors.>file://figures/centralGlue|width=60%|label=centralGlue+

#""Type Descriptions."" Most descriptions belong to this group, such as the ==ColorDescription==, the ==DateDescription==, the ==NumberDescription==, the ==StringDescription==, the ==BooleanDescription==, etc. All of them describe a specific Smalltalk class; in the examples given, this would be Color, Date, Number and all its subclasses, String, and Boolean and its two subclasses True and False. All descriptions know how to perform basic tasks on those types, such as to display, to parse, to serialize, to query, to edit, and to validate them.
#""Container Descriptions."" If a model object is described, it is often necessary to keep a set of other descriptions within a collection, for example the description of a person consists of a description of the title, the family name, the birthday, etc. The ==ContainerDescription== class and its subclasses provide a collection container for other descriptions. In fact the container implements the whole collection interface, so that users can easily iterate (==do:==), filter (==select:==, ==reject:==), transform (==collect:==) and query (==detect:==, ==anySatisfy:==, ==allSatisfy:==) the containing descriptions.
#""Option Descriptions."" The ==SingleOptionDescription== describes an entity, for which it is possible to choose up to one item from a list of objects. The ==MultipleOptionDescription== describes a collection, for which it is possible to choose any number of items from a predefined list of objects. The selected items are described by the referencing description.
#""Relationship Descriptions."" Probably the most advanced descriptions are the ones that describe relationships between objects. The ==ToOneRelationshipDescription== models a one-to-one relationship; the ==ToManyRelationshipDescription== models a one-to-many relationship using a collection. In fact, these two descriptions can also be seen as basic type descriptions, since the ==ToOneRelationshipDescription== describes a generic object reference and the ==ToManyRelationshipDescription== describes a collection of object references. 

!! Exceptions

Since actions on the meta-model can fail. In addition, objects might not match a given meta-model. Finally it is often important to present to the end users readable error messages. Magritte introduces an exception hierarchy which knows about the description, the failure and a human-readable error message as shown in Figure *exceptions*.

+Exceptions.>file://figures/magritte-exceptions.png|width=80%|label=exceptions+


!! Adding Validation

Descriptions can have predicates associated with them to validate the input data. Magritte calls such validation conditions associated with a description. A condition is simply a block that returns true or false. A simple one is the single field condition which is passed the pending value directly and can be attached directly to your descriptions. It is as simple as the following block which checks the length of the value once the blanks are removed.

[[[
aDescription addCondition: [ :value | value withBlanksTrimmed size > 3 ] 
]]]

There are advantages to having your rules outside your domain objects, especially if you're taking advantage of Magritte as an Adaptive Object Model where users can build their own rules. 
It also allows the mementos to easily test data for validity outside the domain object and gives you a nice place to hook into the validation system in the  components. Still you have to pay attention since it may weaken your domain model. 

""Multiple Field Validation."" When we did the Mini-reservation example in previous chapters we wanted the starting date to be later than today. With Magritte we can express this point as follows: 

[[[
MAAddress>>descriptionStartDate
	<magritteDescription>

	^ MADateDescription new 
		accessor: #startDate;
		label: 'Start Date';
		addCondition: [ :value | value > Date today ];
		beRequired;
		yourself
]]]

[[[
MAAddress>>descriptionEndDate
	<magritteDescription>
	
    ^ MADateDescription new 
       accessor: #endDate;
        label: 'End Date';
        addCondition: [ :value | value > Date today ];
        beRequired;
        yourself
]]]

Now to add a validation criterion that depends on several field values, you have to do a bit more than that because you cannot from one description access the other. Suppose that we want to enforce that the endDate should be after the startDate. We cannot add that rule to the endDate description because we cannot reference the startDate value. We need to add the rule in a place  where we can ensure all single field data exists but before it's written to the object from the mementos. 

We need to add a rule to the objects container description like this

[[[
MAAddress>>descriptionEndDate
	<magritteDescription>
    ^ super descriptionContainer
        addCondition: [ :object |
            (object readUsing: self descriptionEndDate) > 
                (object readUsing: self descriptionStartDate)]
        labelled: 'End date must be after start date';
        yourself
]]]

This simply intercepts the container after it is built, and adds a multi field validation by accessing the potential value of those fields. You get the memento for the object, and all the field values are in its cache, keyed by their descriptions. You simply read the values and validate them before they have a chance to be written to the real business object. Multi field validations are a bit more complicated than single field validations but this pattern works well.

!! Accessors and Mementos

""Accessors."" In Smalltalk data can be accessed and stored in different ways. Most common data is stored within instance variables and read and written using accessor methods, but sometimes developers choose other strategies, for example to group data within a referenced object, to keep their data stored within a dictionary, or to calculate it dynamically from block closures. Magritte uses a strategy pattern to be able to access the data through a common interface, see Figure *accessors*.

+Accessors in Magritte.>file://figures/descriptionGlue.png|width=70%|label=accessor+

By far the most commonly used accessor type is the ==SelectorAccessor==. It can be instantiated with two selectors: a zero argument selector to read, and a one argument selector to write. For convenience  it is possible to specify a read selector only, from which the write selector is  inferred automatically. 

The ==MADictionaryAccessor== is used to add and retrieve data from a dictionary with a given key. This access strategy is mainly used for prototyping as it allows one to treat dictionaries like objects with object-based instance variables. 

When a memento writes valid data to its model, it does so through accessors which are also defined by  the descriptions. ==MAAccessor== subclasses allow you to define how a value gets written to your class.

""Mementos."" Magritte introduces mementos that behave like the original model and that delay modifications until they are proven to be valid. When components read and write to domain objects, they do it using mementos rather than working directly on  the objects. The default memento is ==MACheckedMemento==. The mementos give Magritte a place to store invalid form data prior to allowing the data to be committed to the domain object. It also allows Magritte to detect concurrency conflicts. By never committing invalid data to domain objects, there's never a need to roll anything back. So mementos are good since editing might turn a model (temporarily) invalid, canceling an edit shouldn't change the model and concurrent edits of the same model should be detected and (manually) merged. ==mementoClass== is a class factory that you can specialize to specify your own memento. But normally you should not need that. 

+Mementos (simplified version).>file://figures/mementosSimpler.png|width=50%|label=mememtos+



!! Custom Views

Components control how your objects display. Some  descriptions have an obvious one to one relationship with a UI component while others could easily be shown by several different components. *views* shows some components. For example, an ==MAMemoDescription== would be represented by a text area, but a ==MABooleanDescription== could be a checkbox, or a drop down with true and false, or a radio group with true and false. 
 
Each description defaults to a component, but allows you to override and specify any component you  choose, including any custom one you may write using the message ==Description>>componentClass:==. 

[[[
aDescription componentClass: aClass
]]]

+Some Magritte specific widgets.>file://figures/widgets.png|label=views|width=70%+

You can also define your own view by following the steps: 
- Create a subclass of ==MADescriptionComponent==.
- Override ==renderEditorOn:== and/or ==renderViewerOn:== as necessary.
- Use your custom view together with your description by using the accessor ==componentClass:==. 
- Possibly add your custom view to its description into ==defaultComponentClasses==. 



!! Custom Descriptions

In some cases it might happen that there is no description provided to use with a  class. If your domain manipulates money (amount and currency) or URLs (scheme, domain, port, path, parameters) you may want to define your own descriptions (or load an extension package that already provides these descriptions) to take advantage of Magritte. 

Extending Magritte is simple, create your own description but remember that Magritte is described within itself so you have to provide certain information.
 
- Create a subclass of ==MAElementDescription==.
- On the class-side override: ==isAbstract== to return false, ==label== to return the name of the description. On the instance-side override: ==kind== to return the base-class,  ==acceptMagritte:== to enable visiting and ==validateSpecific:== to validate.
- Create a view, if you want to use it for UI building. 
 
We suggest you have a look at existing descriptions. In addition, carefully choosing the right superclass can already provide you part of what you are looking for. Parsing, printing and (de)serialization is implemented by the following visitors: ==MAStringReader==, ==MAStringWriter==, ==MABinaryReader== and ==MABinaryWriter==.


!! Summary 

While Magritte is really powerful, using a meta-data system will add another indirection layer to your application, so this is important to understand how to use such power and when to just use normal development techniques. A good and small example to learn from is the Conrad conference management system developed to manage the ESUG conference available at *http://www.squeaksource.com/Conrad.html*. 

Here Magritte is used to describe the different forms and all the data. The Pier content management system is a more complex example of using Magritte, it can be downloaded at *http://www.piercms.com*.