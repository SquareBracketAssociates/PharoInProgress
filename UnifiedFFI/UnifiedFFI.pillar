! Quick and dirty guide for NativeBoost-ASMJIT users

As you know, in Pharo 5.0 we removed the previous FFI standard implementation. This was made because different reasons: 

- First, we lost the main maintainer of NativeBoost/ASMJIT in a very critical moment, when we were migrating to the new Virtual Machine (Spur), who changed the object format forcing us to adapt NativeBoost (a non trivial task for non assembly-programming experts)
- Second, we are in the process of add different platforms in which Pharo can run. 64bits being the most important, but also different ARMs. 
- Third, there were always concerns about safeness and security when using NativeBoost (as you might know, it requires making executable the whole memory of Pharo)
- Finally, our maintain capacity is limited, and we need to unify all FFI backends around at this moment (There are 3: FFI, Alien, and NativeBoost-ASMJIT). 

So, when considering all this options, we arrive to the conclusion that we need to replace NativeBoost-ASMJIT with something 
we can maintain in the future. Since FFI and Alien will be merged into one FFI (to probably be migrated in the future to 
an enhanced version), and since there some people maintaining it besides us, the answer was obvious. 

But we have a problem: there is already a lot of libraries developed for NativeBoost-ASMJIT, and we do not want to lose 
them (Athens and SDL2, for example, are core part of Pharo... but there are a lot more). 

Also, we believe NativeBoost syntax and it's effort for being close to C syntax are a big addition. Is a lot easier to 
work with a framework when you can take a header file and just copy a declaration. 

Take this as an example: 

[[[language=smalltalk
AthensCairoMatrix>>primMultiplyBy: m
	self ffiCall: #(void cairo_matrix_multiply (
		AthensCairoMatrix * self, 
		AthensCairoMatrix * m , 
		AthensCairoMatrix * self ) ) 
]]]

This is a lot simpler than produce a primitive, then the necessary bindings, something like this: 

[[[language=smalltalk
AthensCairoMatrix>>multiplyBy: m
	self primMultiply: self getHandle by: m getHandle with: self getHandle.

AthensCairoMatrix>>primMultiplyBy: m
	<cdecl: void 'cairo_matrix_multiply' (void*, void*, void *) module: 'libcairo2.dylib'>
	^ 
]]]

And of course things start to complicate when you have to do more complex operations. 

In sum, we want to keep it not just because of backward compatibility, but because we believe is a 
better approach to make C bindings than what we traditionally have. 

Then, we needed a way to use NativeBoost syntax with a different backend, and that's what the new FFI-NB does. 
As I've been pointed, the name is misleading, but it means "FFI with NB syntax"... and yes, I agree we can 
find a better name.

Of course, that means if you are using ASMJIT, your code will not work anymore :(

!! Using FFI-NB

!!! Calling a simple external function

Suppose you want to know the amount of time the image has been running by calling the underlying OS function 
named ==clock==. This function is part of the standard C library (==libc==). Its C declaration is: (According 
to man its return type is ==clock\_t== instead of ==uint==, but we deliberately made it ==uint== for the sake 
of simplicity. We will see how to deal with typedefs in the following sections.)

[[[
uint clock (void)
]]]

To call ==clock== from the image, you should write a binding: a normal Smalltalk method using the ==ffiCall:module:== 
message (Note that it exists other messages to define callouts. They will be discussed later). 

Here is the full definition of the binding of this ==clock== function:

[[[language=smalltalk
FFICExamples class>>ticksSinceStart
  ^ self ffiCall: #( uint clock () ) module: LibC
]]]

In the above example, we define a method named ==ticksSinceStart== on the class side of the class named ==FFICExamples==.
FFI-NB imposes no constraint on the class where the method should be added and programmers can choose to add their bindings 
either on the instance- or the class-side.

To know the number of native clock ticks since the Pharo Virtual Machine started, execute the method and print its result:

[[[language=smalltalk
FFICExamples ticksSinceStart
]]]

!!!! Analysis of an FFI Callout

Now that the call worked, let us look at the definition again:

[[[language=smalltalk
FFICExamples class>>ticksSinceStart
	^ self ffiCall: #( int clock () ) module: LibC
]]]

!!!!! Callout

What we have just done is usually named an FFI ''callout''. 
==#ffiCall:module:== is a method provided by the FFI-NB package and defined in the ==Object== class (so you can use it anywhere). 
It is responsible for generating an FFI callout.
Calling a C function requires to marshall all arguments from Smalltalk to C, push them to the C stack, perform a call 
to the external function, and finally convert the return value from C to Smalltalk. 
Note that this message ==#ffiCall:module:== should only be sent by methods that define a callout, because it does some 
context handling behind the scenes. 

==#ffiCall:module:== handles all of this using the description of the function you provided.
Indeed, it has two arguments: the ''signature of the function'' that will be invoked and the ''module or library'' where 
to look for it.  
In this example we look for ==clock()== function in the standard C library. 

The signature is described by an array: here ==#(int clock ())==.
- Its first element is the C return type, here ==int==.
- Its second is the name of the called function, here ==clock==.
- Its third element is also an array which describes the function parameters if there's any.

Basically, if you strip down outer #(), what is inside is a C function prototype, which is very close to normal C syntax. 
This is intentionally done so, that in most cases you can actually copy-and-paste a complete C function declaration, 
taken from header file or from documentation, and it is ready for use.

The second argument, ==#module:==, should be a module name or a ==FFILibrary==. Module names are easy to explain: is just 
a string who points to your library, e.g. 'libc.so.6'. Libraries will be explained in next section.

!!!!! Using platform dependent libraries

In the previous example, you can see we used a reference to the class ==LibC== while specifying module, instead passing
directly the string =='libc.so.6'==. 

==LibC== inherits from ==FFILibrary== and is a very simple structure who allows you to solve dinamically (by platform) the 
real name of the library in the platform. In the case of ==LibC==, you will see it has (besides the misc methods), this methods
defined.

[[[language=smalltalk
LibC>>macModuleName
	^ 'libc.dylib'
	
LibC>>unixModuleName
	^ 'libc.so.6'
	
LibC>>win32ModuleName
	"While this is not a 'libc' properly, msvcrt has the functions we are defining here"
	^ 'msvcrt.dll'	
]]]

As you can see is very easy to express different paths and names, depending on different conditions. For example, here you 
can see the definition of Cairo library in unix platforms: 

[[[language=smalltalk
CairoLibrary>>unixModuleName
		"On different flavors of linux the path to library may differ
		depending on OS distro or whether system is 32 or 64 bit."
	
		#( 
			'/usr/lib/i386-linux-gnu/libcairo.so.2'
			'/usr/lib32/libcairo.so.2'
			'/usr/lib/libcairo.so.2') 
		do: [ :path | 
			path asFileReference exists ifTrue: [ ^ path ] ].
	
		self error: 'Cannot locate cairo library. Please check if it installed on your system'
]]]

This is very useful and a recommended way of dealing with libraries (better than hardcoding module names). 

""Note"" that you can also define a method ==ffiModuleName== in the class your are implementing your bindings, 
for example: 

[[[language=smalltalk
FFICFunction class>>ffiLibraryName
	^ LibC

FFICExamples class>>ticksSinceStart
	^ self ffiCall: #( uint clock () )
]]]

@@note ==ffiLibraryName== is a terrible name I forget to change. It should be just ==ffiLibrary== (but now change is not so easy...)

!!!! About marshaling

In the ==clock== callout example above, the return type is ==int== and not ==SmallInteger==. This is the same as 
with function arguments. They are all described in terms of C language. In general you don't have to worry too 
much about this, because the FFI-NB library knows how to map standard C values to Smalltalk objects and 
vice-versa. So, when this message is executed, the return value will be converted into a ==SmallInteger==. 
You can also define new mappings from C types to Smalltalk objects. This is useful when wrapping libraries that 
define new C types as we will show later. 

This conversion process for types from different languages is called ''marshalling''. 
We will see more examples of automatic conversions(By automatic, we mean that they are already defined in 
the FFI-NB library) in this Chapter. 

!!! Passing arguments to a function

The previous ==clock== example was the one of the simplest possible. It executes a function without parameters and we 
got the result. Now let's look how we can call functions that take arguments. 

!!!! Passing a method parameter

Let's start with a really simple function: ==abs()==, which takes an integer and returns its absolute value.

""C header.""
[[[
int abs ( int n );
]]]

""Smalltalk binding.""
[[[language=smalltalk
FFICExamples class>>abs: anInteger
	^ self ffiCall: #( int abs (int anInteger) ) module: LibC
]]]

Compared to the previous example, we changed the name of the function and added an argument. 
When functions have arguments you have to specify two things for each of them:
# their type and the object that you want to be sent to the C function. That is, in the arguments array, we put the type of the argument (==int== in this example), and 
# the ''name of the Smalltalk variable'' we pass as argument. 

Here ==anInteger== in ==#(int abs (int anInteger)== means that the variable is bound to the ==abs:== method parameter 
and will be converted to a C int, when executing a call. 

This type-and-name pairs will be repeated, separated by comma for each argument, as we will show in the next examples. 

Now you can try printing this:

[[[language=smalltalk
FFICExamples abs: -42.
]]]

!!!! About arguments

In the callout code/binding declaration, we are expressing not one but ''two'' different aspects: the obvious one 
is the C function signature, the other one is the objects to pass as arguments to the C function when the method is 
invoked. 
In this second aspect there are many possibilities. 
In our example the argument of the C function is the method argument: ==anInteger==.
But it is not always necessary the case.
You can also use some constants, and in that case it's not always necessary to specify the type of the argument. 
This is because FFI-NB automatically uses them as C 'int's: ==nil== and ==false== are converted to 0, and ==true== to 1. 
Numbers are converted to their respective value, and can be positive and negative. 

!!!! Passing literals

Imagine that we want to have a wrapper that always calls the ==abs== function with the number -42. 
Then we directly define it as follows:

[[[language=smalltalk
FFICExamples class>>absMinusFortyTwo
	^ self ffiCall: #( int abs (-42) ) module: LibC
]]]

Note that we omitted the type of the argument and directly write  ==int abs (-45)== instead of writing 
==int abs (int -45)== since by default arguments are automatically converted to C int.

But, if the C function takes a float/double as argument for example, you must specify it in the signature:

[[[language=smalltalk
FFICExamples class>>floor: aFloat
	^ self ffiCall: #( double floor(double aFloat) ) module: LibC
]]]

@@authorToDo Luc Examples with more complex literals: arrays, ...

!!!! Passing variables

Often some functions in C libraries take flags as arguments whose values are declared using #define in C headers.
You can, of course take these constant values from header and put them into your callout.
But it is preferable to use a symbolic names for constants, which is much less confusing than just bare numbers.
To use a symbolic constant you can create an instance-variable, a class-variable or a variable in shared pool, and 
then use the variable name as an argument in your callout.

For example, imagine that we always pass a constant value to our function that is stored in a class variable of our class:

[[[language=smalltalk
Object subclass: #FFICContantExamples
	...
	classVariables: 'TheAnswer'
..
]]]

Then don't forget to initialize it properly:

[[[language=smalltalk
FFICContantExamples class>>initialize
	TheAnswer := -42.
]]]

And finally, in the callout code, we can use it like following:

[[[language=smalltalk
FFICContantExamples class>>absMinusFortyTwo
	^ self ffiCall: #( int abs ( TheAnswer ) ) module: LibC
]]]

You can also pass ==self== or any instance variable as arguments to a C call. 
Suppose you want to add the ==abs== function binding to the class ==SmallInteger== in a method named  ==absoluteValue==, so that we can execute ==-50 absoluteValue==.

In that case we simply add the ==absoluteValue== method to ==SmallInteger==, and we directly pass ==self== as illustrated below.

[[[language=smalltalk
SmallInteger>>absoluteValue
	^ self ffiCall: #( int abs (int self) ) module: LibC
]]]

It is is also possible to pass an instance variable, but we let you do it as an exercise :)

!!!! Passing strings

As you may know strings in C are sequences of characters terminated with a special character: ==\\0==. 
It is then interesting to see how FFI-NB deals with them since they are an important data structure in C. 
For this, we will call the very well known ==strlen== function. 
This function requires a string as argument and returns its number of characters. 

""C header"". 
[[[
int strlen ( const char * str );
]]]

""Smalltalk binding"". 
[[[language=smalltalk
FFICExamples class>>stringLength: aString
	^ self ffiCall: #( int strlen (String aString) ) module: LibC
]]]

!!!!! Example analysis.

You may have noticed that the callout description is not exactly the same as the C function header. 

In the signature ==#( int strlen (String aString) )== there are two differences with the C signature. 
- The first difference is the const keyword of the argument. For those not used to C, that's only a modifier keyword that the compiler takes into account to make some static validations at compile time. It has no value when describing the signature for calling a function at runtime.
- The second difference, an important one, is the specification of the argument. It is declared as ==String aString== instead of ==char * aString==. With ==String aString==, FFI-NB will automatically do the arguments conversion from Smalltalk strings to C strings (null terminated). Therefore it is important to use String and not ==char *==. In the example, the string passed will be put in an external C ==char== array and a null termination character will be added to it. Also, this array will be automatically released after the call ends. This automatic memory management is very useful but we can also control it as we will see later. Using ==(String aString)== is equivalent to ==(someString copyWith: (Character value:0)== as in ==FFICExamples stringLength: (someString copyWith: (Character value:0)==. Conversely, FFI-NB will take the C result value of calling the C function and convert it to a proper Smalltalk Integer in this particular case.

!!!! Passing two strings

We will now call the ==strcmp== function, which takes two strings as arguments and returns -1, 0 or 1 depending on 
the relationship between both strings.

""C header""
[[[
	int strcmp ( const char * str1, const char * str2 );
]]]

""Smalltalk binding""
[[[language=smalltalk
FFICExamples class>>stringCompare: aString with: anotherString 
	^ self ffiCall: #( int strcmp (String aString, String anotherString) ) module: LibC
]]]

Notice that you can add arguments by appending them to the arguments array, using a comma to separate them. Also 
notice that you have to explicitly tell which object is going to be sent for each argument, as already told. In this
case, aString is the first one and anotherString is the second one.

!!! Getting return value from a function

Symmetrically to arguments, returned values are also marshalled, it means that C values are converted to Smalltalk objects. 

We already saw that implicitly through multiple examples since the beginning of the chapter.
For example in the ==abs== example, the result is converted from an int to a SmallInteger.
In the ==floor== example, the  result is converted from a double to a Float.

But FFI-NB can also convert types a bit more complex than atomic types, like String

[[[language=smalltalk
FFICExamples>>#getEnv: aString
	^ self ffiCall: #( String getenv (String string) ) module: LibC
]]]

There is a mapping defined for each atomic type. About a bit more complex objects (like external objects or structures), 
we will talk in following sections.

!!!! Returning "void *"

Take this call as an example: 

[[[language=smalltalk
FFICExamples class>>malloc: aNumber
	^ self ffiCall: #( void * malloc ( int aNumber ) )
]]]

This is a special case of return: when there is a function who answers a ''void *''. In this case, since FFI-NB cannot know 
which kind of object it represents, it will answer an instance of ==ExternalData== (we will see this in next section).

@@authorToDo Luc illustrate that when NULL (a pointer with value 0) is returned, it is automatically converted to nil

!!! External address

External addresses (contained in the class ==ExternalAddress==) is the way we represent any kind of data ''outside'' 
Smalltalk. That means data (pointers, structures, arrays) who are allocated in the heap.

An ==ExternalAddress== can be:

- an allocation of memory (you can use ==ExternalAddress class>>allocate:== or ==ExternalAddress class>>gcallocate:==). Note that in case of ==#allocate:== you will need to ==#free== the external address later (==#gcallocate:== does that work for you).
- the result of a function call (usually it will come as part of an ==ExternalData==)

==ExternalData== represents an ==ExternalAddress== with an C type associated. For example, 

Both =ExternalAddress== and ==ExternalData== can be used as arguments when declaring functions with pointers as parameters, 
for example:

[[[
LibC>>memCopy: src to: dest size: n
	^ self ffiCall: #(void *memcpy(void *dest, const void *src, size_t n)
]]]
 
!!! External objects

FFIExternalObject represent an object in the heap. An external object is a reference to any kind of data allocated 
in the heap mapped to a Smalltalk object. 

This is confuse, so I will try to explain it better: When you allocate a region of memory in the heap, you get a pointer
to that location, who does not represent anything. But often, frameworks will allocate structures, pointers, etc. who 
actually represents "an object" (not in the same sense as a Smalltalk object, but can be interpreted like one). For example, 
to create a cairo surface, you can call this: 

[[[
AthensCairoSurface class>>primImage: aFormat width: aWidth height: aHeight
	^ self ffiCall: #(AthensCairoSurface cairo_image_surface_create ( int aFormat,
                                                                      int aWidth,
                                                                      int aHeight) )
]]]

This will call the cairo function ==cairo_image_surface_create== but instead answer an ==ExternalAddress== it will create an 
instance of ==AthensCairoSurface==, so you can treat the allocated pointer as an object.

Any class in the system can be an external object as long as: 

- it inherits from ==FFIExternalObject==
- it implements in its ""class side"" the method ==asExternalTypeOn:==.

You can check for implementors of ==asExternalTypeOn:== for examples, but they usually looks like this one:

[[[
AthensCairoCanvas class>>asExternalTypeOn: generator
		"use handle ivar to hold my instance (cairo_t)"
		^ FFIExternalObjectType objectClass: self
]]]

@@note if you want to add the resource to an automatic free mechanism, you need to call ==registerAsExternalResource== (in case of children from FFIExternalObject) or implement similar mechanism. 

@@note FFIExternalObject replaces NBExternalObject

!!! Structures

!!! Arrays

!!! Callbacks

!!! Deprecated/modified/not working

- ==nbCall:...== methods are replaced by ==ffiCall:...== methods. While ==nbCall:...== still work, they will be deprecated in future versions. 
- ==nbLibraryNameOrHandle== is replaced by ==ffiLibraryName==. It has to answer ""a string or a children of ==FFILibrary=="". 
- NB types has been replaced with FFI types (but they should work the same). But if you have direct references to ==NBInt32== (for example), you need to change it.

!!!! ==NativeBoost class== replacement

!! How does it works?

In a very simplified way, old NativeBoost was taking the first calls to a method and transforming it 
into machine code, then reexecuting the method who now jumps and executes the code stored in the method.

To simplify, we do ""the same"" but instead injecting machine code, we create bytecodes to translate correctly input and output 
parameters, then we add a call to the function.

@@todo here design explanation.

